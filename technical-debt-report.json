{
    "timestamp": "2025-07-21T15:37:48.856Z",
    "summary": {
        "totalItems": 1251,
        "bySeverity": {
            "low": 213,
            "medium": 1038
        },
        "byCategory": {
            "maintainability": 1019,
            "code-quality": 197,
            "documentation": 32,
            "performance": 3
        },
        "filesScanned": 55,
        "projectHealth": "needs-attention"
    },
    "items": [
        {
            "file": "scripts/template-cleanup/setup-template.js",
            "line": 37,
            "column": 9,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log(`[${timestamp}] ${symbols[type]} ${message}`);"
        },
        {
            "file": "scripts/template-cleanup/setup-template.js",
            "line": 217,
            "column": 5,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log(`"
        },
        {
            "file": "scripts/template-cleanup/setup-template.js",
            "line": 238,
            "column": 5,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log('Automated setup mode not implemented yet');"
        },
        {
            "file": "scripts/template-cleanup/setup-template.js",
            "line": 244,
            "column": 9,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.error('Setup failed:', error.message);"
        },
        {
            "file": "scripts/template-cleanup/setup-template.js",
            "line": 23,
            "column": 51,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "this.rl.question(question, answer => {"
        },
        {
            "file": "scripts/template-cleanup/setup-template.js",
            "line": 55,
            "column": 57,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (!projectName || !gameTitle || !author) {"
        },
        {
            "file": "scripts/template-cleanup/setup-template.js",
            "line": 164,
            "column": 63,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (!existsSync(join(this.projectRoot, '.git'))) {"
        },
        {
            "file": "scripts/template-cleanup/setup-template.js",
            "line": 167,
            "column": 21,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "} else {"
        },
        {
            "file": "scripts/template-cleanup/setup-template.js",
            "line": 173,
            "column": 83,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "execSync('git commit -m \"Initial commit from Phaser Game Template\"', {"
        },
        {
            "file": "scripts/template-cleanup/setup-template.js",
            "line": 187,
            "column": 38,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "execSync('npm install', {"
        },
        {
            "file": "scripts/template-cleanup/setup-template.js",
            "line": 201,
            "column": 40,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "execSync('npm run build', {"
        },
        {
            "file": "scripts/test-github-actions-enhanced.js",
            "line": 32,
            "column": 9,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log(`${prefix} [${timestamp}] ${message}`);"
        },
        {
            "file": "scripts/test-github-actions-enhanced.js",
            "line": 90,
            "column": 21,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log(output);"
        },
        {
            "file": "scripts/test-github-actions-enhanced.js",
            "line": 95,
            "column": 21,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log('STDOUT:', error.stdout.toString());"
        },
        {
            "file": "scripts/test-github-actions-enhanced.js",
            "line": 98,
            "column": 21,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log('STDERR:', error.stderr.toString());"
        },
        {
            "file": "scripts/test-github-actions-enhanced.js",
            "line": 136,
            "column": 21,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log('Docker STDOUT:', error.stdout.toString());"
        },
        {
            "file": "scripts/test-github-actions-enhanced.js",
            "line": 139,
            "column": 21,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log('Docker STDERR:', error.stderr.toString());"
        },
        {
            "file": "scripts/test-github-actions-enhanced.js",
            "line": 321,
            "column": 9,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log(`"
        },
        {
            "file": "scripts/test-github-actions-enhanced.js",
            "line": 37,
            "column": 47,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "this.log('Checking prerequisites...');"
        },
        {
            "file": "scripts/test-github-actions-enhanced.js",
            "line": 49,
            "column": 18,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "try {"
        },
        {
            "file": "scripts/test-github-actions-enhanced.js",
            "line": 53,
            "column": 22,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "} catch {"
        },
        {
            "file": "scripts/test-github-actions-enhanced.js",
            "line": 54,
            "column": 88,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "this.log('Docker not found. Docker tests will be skipped.', 'warning');"
        },
        {
            "file": "scripts/test-github-actions-enhanced.js",
            "line": 64,
            "column": 69,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "this.log('Testing npm scripts that GitHub Actions uses...');"
        },
        {
            "file": "scripts/test-github-actions-enhanced.js",
            "line": 71,
            "column": 11,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "];"
        },
        {
            "file": "scripts/test-github-actions-enhanced.js",
            "line": 73,
            "column": 30,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "let allPassed = true;"
        },
        {
            "file": "scripts/test-github-actions-enhanced.js",
            "line": 76,
            "column": 18,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "try {"
        },
        {
            "file": "scripts/test-github-actions-enhanced.js",
            "line": 78,
            "column": 46,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "const startTime = Date.now();"
        },
        {
            "file": "scripts/test-github-actions-enhanced.js",
            "line": 80,
            "column": 50,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "const output = execSync(script, {"
        },
        {
            "file": "scripts/test-github-actions-enhanced.js",
            "line": 82,
            "column": 39,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "encoding: 'utf-8',"
        },
        {
            "file": "scripts/test-github-actions-enhanced.js",
            "line": 84,
            "column": 20,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "});"
        },
        {
            "file": "scripts/test-github-actions-enhanced.js",
            "line": 86,
            "column": 57,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "const duration = Date.now() - startTime;"
        },
        {
            "file": "scripts/test-github-actions-enhanced.js",
            "line": 87,
            "column": 75,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "this.log(`${script} - PASSED (${duration}ms)`, 'success');"
        },
        {
            "file": "scripts/test-github-actions-enhanced.js",
            "line": 89,
            "column": 41,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (verbose && output) {"
        },
        {
            "file": "scripts/test-github-actions-enhanced.js",
            "line": 92,
            "column": 30,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "} catch (error) {"
        },
        {
            "file": "scripts/test-github-actions-enhanced.js",
            "line": 94,
            "column": 47,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (verbose && error.stdout) {"
        },
        {
            "file": "scripts/test-github-actions-enhanced.js",
            "line": 96,
            "column": 18,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "}"
        },
        {
            "file": "scripts/test-github-actions-enhanced.js",
            "line": 97,
            "column": 47,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (verbose && error.stderr) {"
        },
        {
            "file": "scripts/test-github-actions-enhanced.js",
            "line": 99,
            "column": 18,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "}"
        },
        {
            "file": "scripts/test-github-actions-enhanced.js",
            "line": 102,
            "column": 10,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "}"
        },
        {
            "file": "scripts/test-github-actions-enhanced.js",
            "line": 108,
            "column": 53,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "this.log('Testing Docker build locally...');"
        },
        {
            "file": "scripts/test-github-actions-enhanced.js",
            "line": 116,
            "column": 10,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "}"
        },
        {
            "file": "scripts/test-github-actions-enhanced.js",
            "line": 123,
            "column": 37,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "execSync(buildCommand, {"
        },
        {
            "file": "scripts/test-github-actions-enhanced.js",
            "line": 126,
            "column": 16,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "});"
        },
        {
            "file": "scripts/test-github-actions-enhanced.js",
            "line": 134,
            "column": 27,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (verbose) {"
        },
        {
            "file": "scripts/test-github-actions-enhanced.js",
            "line": 135,
            "column": 36,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (error.stdout) {"
        },
        {
            "file": "scripts/test-github-actions-enhanced.js",
            "line": 137,
            "column": 18,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "}"
        },
        {
            "file": "scripts/test-github-actions-enhanced.js",
            "line": 138,
            "column": 36,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (error.stderr) {"
        },
        {
            "file": "scripts/test-github-actions-enhanced.js",
            "line": 147,
            "column": 65,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "this.log('Validating GitHub Actions workflow files...');"
        },
        {
            "file": "scripts/test-github-actions-enhanced.js",
            "line": 157,
            "column": 11,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "];"
        },
        {
            "file": "scripts/test-github-actions-enhanced.js",
            "line": 159,
            "column": 26,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "let valid = true;"
        },
        {
            "file": "scripts/test-github-actions-enhanced.js",
            "line": 163,
            "column": 44,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (existsSync(workflowPath)) {"
        },
        {
            "file": "scripts/test-github-actions-enhanced.js",
            "line": 165,
            "column": 21,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "} else {"
        },
        {
            "file": "scripts/test-github-actions-enhanced.js",
            "line": 166,
            "column": 60,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "this.log(`${workflow} - MISSING`, 'error');"
        },
        {
            "file": "scripts/test-github-actions-enhanced.js",
            "line": 169,
            "column": 10,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "}"
        },
        {
            "file": "scripts/test-github-actions-enhanced.js",
            "line": 175,
            "column": 65,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "this.log('Testing container registry configuration...');"
        },
        {
            "file": "scripts/test-github-actions-enhanced.js",
            "line": 183,
            "column": 10,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "}"
        },
        {
            "file": "scripts/test-github-actions-enhanced.js",
            "line": 188,
            "column": 35,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "execSync(tagCommand, {"
        },
        {
            "file": "scripts/test-github-actions-enhanced.js",
            "line": 191,
            "column": 16,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "});"
        },
        {
            "file": "scripts/test-github-actions-enhanced.js",
            "line": 203,
            "column": 72,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "this.log('Simulating GitHub Actions environment variables...');"
        },
        {
            "file": "scripts/test-github-actions-enhanced.js",
            "line": 207,
            "column": 45,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "process.env.GITHUB_ACTIONS = 'true';"
        },
        {
            "file": "scripts/test-github-actions-enhanced.js",
            "line": 214,
            "column": 67,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "this.log('⚡ Quick GitHub Actions compatibility check...');"
        },
        {
            "file": "scripts/test-github-actions-enhanced.js",
            "line": 223,
            "column": 59,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "const result = await this.testNpmScripts(verbose);"
        },
        {
            "file": "scripts/test-github-actions-enhanced.js",
            "line": 235,
            "column": 44,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "this.log('🐳 Docker-only test...');"
        },
        {
            "file": "scripts/test-github-actions-enhanced.js",
            "line": 247,
            "column": 66,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "this.log('🚀 Running full GitHub Actions test suite...');"
        },
        {
            "file": "scripts/test-github-actions-enhanced.js",
            "line": 255,
            "column": 44,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "this.setGitHubActionsEnvironment();"
        },
        {
            "file": "scripts/test-github-actions-enhanced.js",
            "line": 262,
            "column": 11,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "];"
        },
        {
            "file": "scripts/test-github-actions-enhanced.js",
            "line": 265,
            "column": 32,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "const testResults = [];"
        },
        {
            "file": "scripts/test-github-actions-enhanced.js",
            "line": 269,
            "column": 42,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "const startTime = Date.now();"
        },
        {
            "file": "scripts/test-github-actions-enhanced.js",
            "line": 271,
            "column": 18,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "try {"
        },
        {
            "file": "scripts/test-github-actions-enhanced.js",
            "line": 272,
            "column": 48,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "const result = await test.fn();"
        },
        {
            "file": "scripts/test-github-actions-enhanced.js",
            "line": 273,
            "column": 57,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "const duration = Date.now() - startTime;"
        },
        {
            "file": "scripts/test-github-actions-enhanced.js",
            "line": 275,
            "column": 35,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "testResults.push({"
        },
        {
            "file": "scripts/test-github-actions-enhanced.js",
            "line": 279,
            "column": 20,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "});"
        },
        {
            "file": "scripts/test-github-actions-enhanced.js",
            "line": 281,
            "column": 31,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (!result) {"
        },
        {
            "file": "scripts/test-github-actions-enhanced.js",
            "line": 284,
            "column": 30,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "} catch (error) {"
        },
        {
            "file": "scripts/test-github-actions-enhanced.js",
            "line": 285,
            "column": 57,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "const duration = Date.now() - startTime;"
        },
        {
            "file": "scripts/test-github-actions-enhanced.js",
            "line": 287,
            "column": 35,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "testResults.push({"
        },
        {
            "file": "scripts/test-github-actions-enhanced.js",
            "line": 290,
            "column": 30,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "duration,"
        },
        {
            "file": "scripts/test-github-actions-enhanced.js",
            "line": 292,
            "column": 20,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "});"
        },
        {
            "file": "scripts/test-github-actions-enhanced.js",
            "line": 303,
            "column": 32,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (result.error) {"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 32,
            "column": 9,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log(`${prefix} [${timestamp}] ${message}`);"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 438,
            "column": 9,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log(`"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 438,
            "column": 20,
            "pattern": "Long Parameter Lists",
            "severity": "medium",
            "category": "maintainability",
            "description": "Functions with many parameters are hard to maintain",
            "suggestion": "Use object parameters or break into smaller functions",
            "context": "console.log(`"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 37,
            "column": 52,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "this.log('Verifying project structure...');"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 48,
            "column": 11,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "];"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 50,
            "column": 26,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "let valid = true;"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 54,
            "column": 40,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (existsSync(fullPath)) {"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 56,
            "column": 21,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "} else {"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 57,
            "column": 56,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "this.log(`${path} - MISSING`, 'error');"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 60,
            "column": 10,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "}"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 66,
            "column": 66,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "this.log('Validating GitHub Actions workflow syntax...');"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 68,
            "column": 72,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "const workflowDir = join(PROJECT_ROOT, '.github', 'workflows');"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 75,
            "column": 88,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "const workflowFiles = readdirSync(workflowDir).filter(f => f.endsWith('.yml'));"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 77,
            "column": 26,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "let valid = true;"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 80,
            "column": 18,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "try {"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 81,
            "column": 58,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "const filePath = join(workflowDir, file);"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 84,
            "column": 51,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "// Basic YAML structure validation"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 86,
            "column": 73,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "this.log(`${file} - Missing 'name' field`, 'error');"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 87,
            "column": 35,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "valid = false;"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 89,
            "column": 18,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "}"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 92,
            "column": 71,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "this.log(`${file} - Missing 'on' field`, 'error');"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 93,
            "column": 35,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "valid = false;"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 95,
            "column": 18,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "}"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 98,
            "column": 73,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "this.log(`${file} - Missing 'jobs' field`, 'error');"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 99,
            "column": 35,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "valid = false;"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 103,
            "column": 43,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "// Check for common issues"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 108,
            "column": 18,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "}"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 112,
            "column": 18,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "}"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 116,
            "column": 30,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "} catch (error) {"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 120,
            "column": 10,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "}"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 126,
            "column": 61,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "this.log('Verifying package.json configuration...');"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 128,
            "column": 68,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "const packageJsonPath = join(PROJECT_ROOT, 'package.json');"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 140,
            "column": 15,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "];"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 142,
            "column": 30,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "let valid = true;"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 144,
            "column": 52,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "for (const script of requiredScripts) {"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 145,
            "column": 76,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (packageJson.scripts && script in packageJson.scripts) {"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 147,
            "column": 25,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "} else {"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 148,
            "column": 71,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "this.log(`Script '${script}' - MISSING`, 'error');"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 154,
            "column": 67,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (packageJson.engines && packageJson.engines.node) {"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 156,
            "column": 21,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "} else {"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 163,
            "column": 14,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "}"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 173,
            "column": 59,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "this.log('Verifying TypeScript configuration...');"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 178,
            "column": 11,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "];"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 180,
            "column": 26,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "let valid = true;"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 183,
            "column": 61,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "const fullPath = join(PROJECT_ROOT, configPath);"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 185,
            "column": 40,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (existsSync(fullPath)) {"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 186,
            "column": 22,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "try {"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 187,
            "column": 81,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "const content = JSON.parse(readFileSync(fullPath, 'utf-8'));"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 190,
            "column": 45,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "// Check for strict mode"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 191,
            "column": 85,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (content.compilerOptions && content.compilerOptions.strict) {"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 193,
            "column": 29,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "} else {"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 196,
            "column": 34,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "} catch (error) {"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 200,
            "column": 21,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "} else {"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 201,
            "column": 62,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "this.log(`${configPath} - MISSING`, 'error');"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 204,
            "column": 10,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "}"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 210,
            "column": 53,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "this.log('Verifying test configuration...');"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 215,
            "column": 11,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "];"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 217,
            "column": 26,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "let valid = true;"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 220,
            "column": 61,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "const fullPath = join(PROJECT_ROOT, configPath);"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 222,
            "column": 40,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (existsSync(fullPath)) {"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 224,
            "column": 21,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "} else {"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 225,
            "column": 62,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "this.log(`${configPath} - MISSING`, 'error');"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 228,
            "column": 10,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "}"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 234,
            "column": 64,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "this.log('Checking required secrets documentation...');"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 245,
            "column": 61,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "const ciDocsPath = join(docsPath, 'ci-cd-setup.md');"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 248,
            "column": 63,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "const content = readFileSync(ciDocsPath, 'utf-8');"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 250,
            "column": 54,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "for (const secret of secretsToDocument) {"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 251,
            "column": 48,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (content.includes(secret)) {"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 253,
            "column": 25,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "} else {"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 259,
            "column": 10,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "}"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 265,
            "column": 58,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "this.log('Checking dependency compatibility...');"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 270,
            "column": 45,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "execSync('npm list --depth=0', {"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 278,
            "column": 18,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "try {"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 279,
            "column": 63,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "execSync('npm audit --audit-level moderate', {"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 282,
            "column": 20,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "});"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 284,
            "column": 35,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "} catch (auditError) {"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 286,
            "column": 14,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "}"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 297,
            "column": 58,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "this.log('Testing build artifact generation...');"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 302,
            "column": 40,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (existsSync(distPath)) {"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 308,
            "column": 40,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "execSync('npm run build', {"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 314,
            "column": 40,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (existsSync(distPath)) {"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 318,
            "column": 54,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "}).trim().split('\\n').filter(f => f);"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 322,
            "column": 45,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "// Check for essential files"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 323,
            "column": 55,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "const essentialFiles = ['index.html'];"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 327,
            "column": 19,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "];"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 329,
            "column": 53,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "for (const file of essentialFiles) {"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 330,
            "column": 61,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (files.some(f => f.includes(file))) {"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 332,
            "column": 29,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "} else {"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 333,
            "column": 81,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "this.log(`Essential file '${file}' - MISSING`, 'error');"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 336,
            "column": 18,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "}"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 338,
            "column": 76,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "for (const { pattern, description } of essentialPatterns) {"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 339,
            "column": 60,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (files.some(f => pattern.test(f))) {"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 341,
            "column": 29,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "} else {"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 342,
            "column": 92,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "this.log(`Essential artifact '${description}' - MISSING`, 'error');"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 346,
            "column": 21,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "} else {"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 347,
            "column": 68,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "this.log('Build artifacts not generated', 'error');"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 349,
            "column": 14,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "}"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 359,
            "column": 69,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "this.log('🔧 Starting CI/CD setup verification...', 'info');"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 368,
            "column": 11,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "];"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 372,
            "column": 10,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "}"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 376,
            "column": 10,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "}"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 379,
            "column": 32,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "const testResults = [];"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 383,
            "column": 42,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "const startTime = Date.now();"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 385,
            "column": 18,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "try {"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 386,
            "column": 48,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "const result = await test.fn();"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 387,
            "column": 57,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "const duration = Date.now() - startTime;"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 389,
            "column": 35,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "testResults.push({"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 393,
            "column": 20,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "});"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 395,
            "column": 31,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (!result) {"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 398,
            "column": 30,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "} catch (error) {"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 399,
            "column": 57,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "const duration = Date.now() - startTime;"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 400,
            "column": 35,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "testResults.push({"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 403,
            "column": 30,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "duration,"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 405,
            "column": 20,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "});"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 408,
            "column": 10,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "}"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 413,
            "column": 34,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (result.success) {"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 415,
            "column": 21,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "} else {"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 416,
            "column": 85,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "this.log(`${result.name} - FAILED (${result.duration}ms)`, 'error');"
        },
        {
            "file": "scripts/verify-ci-setup.js",
            "line": 417,
            "column": 36,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (result.error) {"
        },
        {
            "file": "src/components/CoreComponents.ts",
            "line": 208,
            "column": 33,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (remaining > 0) {"
        },
        {
            "file": "src/components/CoreComponents.ts",
            "line": 210,
            "column": 21,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "} else {"
        },
        {
            "file": "src/ecs/EntityManager.ts",
            "line": 103,
            "column": 66,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (entity && entity.hasComponents(componentTypes)) {"
        },
        {
            "file": "src/ecs/EntityManager.ts",
            "line": 121,
            "column": 59,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (!this.componentIndex.has(componentType)) {"
        },
        {
            "file": "src/ecs/World.ts",
            "line": 63,
            "column": 32,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (index !== -1) {"
        },
        {
            "file": "src/ecs/World.ts",
            "line": 64,
            "column": 47,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "this.systems.splice(index, 1);"
        },
        {
            "file": "src/ecs/World.ts",
            "line": 65,
            "column": 38,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "system.onRemoved?.();"
        },
        {
            "file": "src/ecs/World.ts",
            "line": 93,
            "column": 34,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (system.enabled) {"
        },
        {
            "file": "src/ecs/World.ts",
            "line": 102,
            "column": 54,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "for (const system of this.systemsToAdd) {"
        },
        {
            "file": "src/ecs/World.ts",
            "line": 103,
            "column": 43,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "this.systems.push(system);"
        },
        {
            "file": "src/ecs/World.ts",
            "line": 112,
            "column": 65,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "for (const systemToRemove of this.systemsToRemove) {"
        },
        {
            "file": "src/ecs/World.ts",
            "line": 113,
            "column": 68,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "const index = this.systems.indexOf(systemToRemove);"
        },
        {
            "file": "src/ecs/World.ts",
            "line": 114,
            "column": 36,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (index !== -1) {"
        },
        {
            "file": "src/ecs/World.ts",
            "line": 115,
            "column": 51,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "this.systems.splice(index, 1);"
        },
        {
            "file": "src/ecs/World.ts",
            "line": 116,
            "column": 50,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "systemToRemove.onRemoved?.();"
        },
        {
            "file": "src/main.ts",
            "line": 62,
            "column": 5,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.error('Game Error:', event.error);"
        },
        {
            "file": "src/main.ts",
            "line": 66,
            "column": 5,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.error('Unhandled Promise Rejection:', event.reason);"
        },
        {
            "file": "src/scenes/GameScene.ts",
            "line": 17,
            "column": 9,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log(`Created player entity with ID: ${playerEntity.id}`);mponent-System patterns"
        },
        {
            "file": "src/scenes/GameScene.ts",
            "line": 64,
            "column": 9,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log('GameScene: Starting with ECS architecture');"
        },
        {
            "file": "src/scenes/GameScene.ts",
            "line": 94,
            "column": 9,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log('GameScene: ECS initialization complete');"
        },
        {
            "file": "src/scenes/GameScene.ts",
            "line": 120,
            "column": 9,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log(`Created player entity with ID: ${playerEntity.id}`);"
        },
        {
            "file": "src/scenes/GameScene.ts",
            "line": 193,
            "column": 9,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log('GameScene: Shutting down ECS world');"
        },
        {
            "file": "src/scenes/GameScene.ts",
            "line": 153,
            "column": 28,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (position) {"
        },
        {
            "file": "src/scenes/GameScene.ts",
            "line": 154,
            "column": 68,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "this.cameras.main.centerOn(position.x, position.y);"
        },
        {
            "file": "src/scenes/GameScene.ts",
            "line": 178,
            "column": 50,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "// Update camera to follow sprite"
        },
        {
            "file": "src/scenes/StartScene.ts",
            "line": 84,
            "column": 18,
            "pattern": "Long Parameter Lists",
            "severity": "medium",
            "category": "maintainability",
            "description": "Functions with many parameters are hard to maintain",
            "suggestion": "Use object parameters or break into smaller functions",
            "context": ".text(640, 150, 'PHASER GAME TEMPLATE', {"
        },
        {
            "file": "src/scenes/StartScene.ts",
            "line": 95,
            "column": 18,
            "pattern": "Long Parameter Lists",
            "severity": "medium",
            "category": "maintainability",
            "description": "Functions with many parameters are hard to maintain",
            "suggestion": "Use object parameters or break into smaller functions",
            "context": ".text(640, 200, 'Professional 2D Game Development Foundation', {"
        },
        {
            "file": "src/scenes/StartScene.ts",
            "line": 104,
            "column": 24,
            "pattern": "Long Parameter Lists",
            "severity": "medium",
            "category": "maintainability",
            "description": "Functions with many parameters are hard to maintain",
            "suggestion": "Use object parameters or break into smaller functions",
            "context": "this.tweens.add({"
        },
        {
            "file": "src/scenes/StartScene.ts",
            "line": 126,
            "column": 24,
            "pattern": "Long Parameter Lists",
            "severity": "medium",
            "category": "maintainability",
            "description": "Functions with many parameters are hard to maintain",
            "suggestion": "Use object parameters or break into smaller functions",
            "context": "this.tweens.add({"
        },
        {
            "file": "src/scenes/StartScene.ts",
            "line": 138,
            "column": 18,
            "pattern": "Long Parameter Lists",
            "severity": "medium",
            "category": "maintainability",
            "description": "Functions with many parameters are hard to maintain",
            "suggestion": "Use object parameters or break into smaller functions",
            "context": ".text(640, 550, 'Press SPACE to Begin Mission', {"
        },
        {
            "file": "src/scenes/StartScene.ts",
            "line": 148,
            "column": 24,
            "pattern": "Long Parameter Lists",
            "severity": "medium",
            "category": "maintainability",
            "description": "Functions with many parameters are hard to maintain",
            "suggestion": "Use object parameters or break into smaller functions",
            "context": "this.tweens.add({"
        },
        {
            "file": "src/scenes/StartScene.ts",
            "line": 66,
            "column": 44,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": ".text(640, 360, 'Loading...', {"
        },
        {
            "file": "src/scenes/StartScene.ts",
            "line": 67,
            "column": 34,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "fontSize: '24px',"
        },
        {
            "file": "src/scenes/StartScene.ts",
            "line": 84,
            "column": 54,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": ".text(640, 150, 'PHASER GAME TEMPLATE', {"
        },
        {
            "file": "src/scenes/StartScene.ts",
            "line": 85,
            "column": 34,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "fontSize: '48px',"
        },
        {
            "file": "src/scenes/StartScene.ts",
            "line": 86,
            "column": 34,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "color: '#00ff88',"
        },
        {
            "file": "src/scenes/StartScene.ts",
            "line": 87,
            "column": 49,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "fontFamily: 'Arial, sans-serif',"
        },
        {
            "file": "src/scenes/StartScene.ts",
            "line": 88,
            "column": 35,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "stroke: '#000000',"
        },
        {
            "file": "src/scenes/StartScene.ts",
            "line": 95,
            "column": 77,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": ".text(640, 200, 'Professional 2D Game Development Foundation', {"
        },
        {
            "file": "src/scenes/StartScene.ts",
            "line": 96,
            "column": 34,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "fontSize: '20px',"
        },
        {
            "file": "src/scenes/StartScene.ts",
            "line": 97,
            "column": 34,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "color: '#88ffaa',"
        },
        {
            "file": "src/scenes/StartScene.ts",
            "line": 98,
            "column": 49,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "fontFamily: 'Arial, sans-serif',"
        },
        {
            "file": "src/scenes/StartScene.ts",
            "line": 138,
            "column": 62,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": ".text(640, 550, 'Press SPACE to Begin Mission', {"
        },
        {
            "file": "src/scenes/StartScene.ts",
            "line": 139,
            "column": 34,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "fontSize: '24px',"
        },
        {
            "file": "src/scenes/StartScene.ts",
            "line": 140,
            "column": 34,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "color: '#ffffff',"
        },
        {
            "file": "src/scenes/StartScene.ts",
            "line": 141,
            "column": 49,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "fontFamily: 'Arial, sans-serif',"
        },
        {
            "file": "src/scenes/StartScene.ts",
            "line": 142,
            "column": 44,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "backgroundColor: '#004422',"
        },
        {
            "file": "src/systems/AssetLoader.ts",
            "line": 38,
            "column": 13,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.warn('⚠️  No asset manifest found, falling back to basic loading');"
        },
        {
            "file": "src/systems/AssetLoader.ts",
            "line": 42,
            "column": 9,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log('🔄 Loading essential assets...');"
        },
        {
            "file": "src/systems/AssetLoader.ts",
            "line": 45,
            "column": 9,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log('✅ Essential assets loaded');"
        },
        {
            "file": "src/systems/AssetLoader.ts",
            "line": 57,
            "column": 13,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.warn(`⚠️  No assets found for level: ${levelId}`);"
        },
        {
            "file": "src/systems/AssetLoader.ts",
            "line": 61,
            "column": 9,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log(`🔄 Loading level assets: ${levelId}...`);"
        },
        {
            "file": "src/systems/AssetLoader.ts",
            "line": 70,
            "column": 9,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log(`✅ Level assets loaded: ${levelId}`);"
        },
        {
            "file": "src/systems/AssetLoader.ts",
            "line": 82,
            "column": 9,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log('🔄 Loading optional assets...');"
        },
        {
            "file": "src/systems/AssetLoader.ts",
            "line": 85,
            "column": 9,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log('✅ Optional assets loaded');"
        },
        {
            "file": "src/systems/AssetLoader.ts",
            "line": 96,
            "column": 17,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log("
        },
        {
            "file": "src/systems/AssetLoader.ts",
            "line": 103,
            "column": 13,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.error('❌ Failed to load asset manifest:', error);"
        },
        {
            "file": "src/systems/AssetLoader.ts",
            "line": 130,
            "column": 17,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.warn(`⚠️  Asset not found in manifest: ${key}`);"
        },
        {
            "file": "src/systems/AssetLoader.ts",
            "line": 139,
            "column": 17,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.warn(`⚠️  Asset entry is null: ${key}`);"
        },
        {
            "file": "src/systems/AssetLoader.ts",
            "line": 150,
            "column": 17,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.error(`❌ Failed to load asset: ${key}`, error);"
        },
        {
            "file": "src/systems/AssetLoader.ts",
            "line": 184,
            "column": 17,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.warn(`⚠️  Unknown asset type: ${entry.type} for ${key}`);"
        },
        {
            "file": "src/systems/AssetLoader.ts",
            "line": 91,
            "column": 32,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (!response.ok) {"
        },
        {
            "file": "src/systems/AssetLoader.ts",
            "line": 95,
            "column": 33,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (this.manifest) {"
        },
        {
            "file": "src/systems/AssetLoader.ts",
            "line": 97,
            "column": 49,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "'📋 Asset manifest loaded:',"
        },
        {
            "file": "src/systems/AssetLoader.ts",
            "line": 116,
            "column": 41,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (this.progressCallback) {"
        },
        {
            "file": "src/systems/AssetLoader.ts",
            "line": 117,
            "column": 40,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "this.progressCallback({"
        },
        {
            "file": "src/systems/AssetLoader.ts",
            "line": 118,
            "column": 30,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "category,"
        },
        {
            "file": "src/systems/AssetLoader.ts",
            "line": 119,
            "column": 28,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "loaded,"
        },
        {
            "file": "src/systems/AssetLoader.ts",
            "line": 120,
            "column": 27,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "total,"
        },
        {
            "file": "src/systems/AssetLoader.ts",
            "line": 131,
            "column": 26,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "loaded++;"
        },
        {
            "file": "src/systems/AssetLoader.ts",
            "line": 132,
            "column": 34,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "updateProgress();"
        },
        {
            "file": "src/systems/AssetLoader.ts",
            "line": 138,
            "column": 26,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (!entry) {"
        },
        {
            "file": "src/systems/AssetLoader.ts",
            "line": 140,
            "column": 26,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "loaded++;"
        },
        {
            "file": "src/systems/AssetLoader.ts",
            "line": 141,
            "column": 34,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "updateProgress();"
        },
        {
            "file": "src/systems/AssetLoader.ts",
            "line": 145,
            "column": 18,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "try {"
        },
        {
            "file": "src/systems/AssetLoader.ts",
            "line": 146,
            "column": 50,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "await this.loadAsset(key, entry);"
        },
        {
            "file": "src/systems/AssetLoader.ts",
            "line": 147,
            "column": 26,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "loaded++;"
        },
        {
            "file": "src/systems/AssetLoader.ts",
            "line": 149,
            "column": 30,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "} catch (error) {"
        },
        {
            "file": "src/systems/AssetLoader.ts",
            "line": 151,
            "column": 26,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "loaded++;"
        },
        {
            "file": "src/systems/AssetLoader.ts",
            "line": 161,
            "column": 26,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "case 'image':"
        },
        {
            "file": "src/systems/AssetLoader.ts",
            "line": 162,
            "column": 49,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "this.scene.load.image(key, url);"
        },
        {
            "file": "src/systems/AssetLoader.ts",
            "line": 166,
            "column": 58,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "// Load both the image and JSON for atlas"
        },
        {
            "file": "src/systems/AssetLoader.ts",
            "line": 167,
            "column": 67,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "const atlasJsonUrl = url.replace('.png', '.json');"
        },
        {
            "file": "src/systems/AssetLoader.ts",
            "line": 168,
            "column": 63,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "this.scene.load.atlas(key, url, atlasJsonUrl);"
        },
        {
            "file": "src/systems/AssetLoader.ts",
            "line": 173,
            "column": 52,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "// Load audio with format fallbacks"
        },
        {
            "file": "src/systems/AssetLoader.ts",
            "line": 174,
            "column": 60,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "const audioUrls = this.getAudioUrls(entry);"
        },
        {
            "file": "src/systems/AssetLoader.ts",
            "line": 175,
            "column": 55,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "this.scene.load.audio(key, audioUrls);"
        },
        {
            "file": "src/systems/AssetLoader.ts",
            "line": 179,
            "column": 25,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "case 'data':"
        },
        {
            "file": "src/systems/AssetLoader.ts",
            "line": 180,
            "column": 48,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "this.scene.load.json(key, url);"
        },
        {
            "file": "src/systems/AssetLoader.ts",
            "line": 183,
            "column": 21,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "default:"
        },
        {
            "file": "src/systems/AssetLoader.ts",
            "line": 194,
            "column": 39,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "const onComplete = () => {"
        },
        {
            "file": "src/systems/AssetLoader.ts",
            "line": 195,
            "column": 27,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "cleanup();"
        },
        {
            "file": "src/systems/AssetLoader.ts",
            "line": 200,
            "column": 43,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (fileObj.key === key) {"
        },
        {
            "file": "src/systems/AssetLoader.ts",
            "line": 201,
            "column": 31,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "cleanup();"
        },
        {
            "file": "src/systems/AssetLoader.ts",
            "line": 206,
            "column": 36,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "const cleanup = () => {"
        },
        {
            "file": "src/systems/AssetLoader.ts",
            "line": 207,
            "column": 65,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "this.scene.load.off('filecomplete', onComplete);"
        },
        {
            "file": "src/systems/AssetLoader.ts",
            "line": 256,
            "column": 33,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (webpSupported) {"
        },
        {
            "file": "src/systems/AssetLoader.ts",
            "line": 276,
            "column": 87,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (audio.canPlayType && audio.canPlayType('audio/webm; codecs=\"opus\"')) {"
        },
        {
            "file": "src/systems/AssetLoader.ts",
            "line": 281,
            "column": 72,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (audio.canPlayType && audio.canPlayType('audio/mpeg')) {"
        },
        {
            "file": "src/systems/AssetLoader.ts",
            "line": 286,
            "column": 71,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (audio.canPlayType && audio.canPlayType('audio/ogg')) {"
        },
        {
            "file": "src/systems/CoreSystems.ts",
            "line": 155,
            "column": 13,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.warn(`Failed to create sprite with texture: ${spriteComp.textureKey}`, error);"
        },
        {
            "file": "src/systems/CoreSystems.ts",
            "line": 62,
            "column": 57,
            "pattern": "Long Parameter Lists",
            "severity": "medium",
            "category": "maintainability",
            "description": "Functions with many parameters are hard to maintain",
            "suggestion": "Use object parameters or break into smaller functions",
            "context": "this.wasdKeys = scene.input.keyboard.addKeys('W,S,A,D,UP,DOWN,LEFT,RIGHT') as {"
        },
        {
            "file": "src/systems/CoreSystems.ts",
            "line": 241,
            "column": 45,
            "pattern": "Long Parameter Lists",
            "severity": "medium",
            "category": "maintainability",
            "description": "Functions with many parameters are hard to maintain",
            "suggestion": "Use object parameters or break into smaller functions",
            "context": "this.debugText = this.scene.add.text(10, 10, '', {"
        },
        {
            "file": "src/systems/CoreSystems.ts",
            "line": 43,
            "column": 34,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (sprite?.sprite) {"
        },
        {
            "file": "src/systems/CoreSystems.ts",
            "line": 130,
            "column": 38,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (!spriteComp.sprite) {"
        },
        {
            "file": "src/systems/CoreSystems.ts",
            "line": 135,
            "column": 37,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (spriteComp.sprite) {"
        },
        {
            "file": "src/systems/CoreSystems.ts",
            "line": 136,
            "column": 71,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "spriteComp.sprite.setPosition(position.x, position.y);"
        },
        {
            "file": "src/systems/CoreSystems.ts",
            "line": 137,
            "column": 66,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "spriteComp.sprite.setVisible(spriteComp.visible);"
        },
        {
            "file": "src/systems/CoreSystems.ts",
            "line": 138,
            "column": 62,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "spriteComp.sprite.setAlpha(spriteComp.alpha);"
        },
        {
            "file": "src/systems/CoreSystems.ts",
            "line": 139,
            "column": 68,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "spriteComp.sprite.setRotation(spriteComp.rotation);"
        },
        {
            "file": "src/systems/CoreSystems.ts",
            "line": 140,
            "column": 82,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "spriteComp.sprite.setScale(spriteComp.scaleX, spriteComp.scaleY);"
        },
        {
            "file": "src/systems/CoreSystems.ts",
            "line": 148,
            "column": 55,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "spriteComp.sprite = this.scene.add.sprite("
        },
        {
            "file": "src/systems/CoreSystems.ts",
            "line": 149,
            "column": 28,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "position.x,"
        },
        {
            "file": "src/systems/CoreSystems.ts",
            "line": 150,
            "column": 28,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "position.y,"
        },
        {
            "file": "src/systems/CoreSystems.ts",
            "line": 151,
            "column": 39,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "spriteComp.textureKey,"
        },
        {
            "file": "src/systems/CoreSystems.ts",
            "line": 164,
            "column": 38,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (spriteComp?.sprite) {"
        },
        {
            "file": "src/systems/CoreSystems.ts",
            "line": 165,
            "column": 45,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "spriteComp.sprite.destroy();"
        },
        {
            "file": "src/systems/CoreSystems.ts",
            "line": 196,
            "column": 55,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "for (const equipment of player.equipped) {"
        },
        {
            "file": "src/systems/CoreSystems.ts",
            "line": 205,
            "column": 65,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (player.energy <= 0 && player.state !== 'idle') {"
        },
        {
            "file": "src/systems/CoreSystems.ts",
            "line": 266,
            "column": 32,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (playerEntity) {"
        },
        {
            "file": "src/systems/CoreSystems.ts",
            "line": 267,
            "column": 75,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "const player = playerEntity.getComponent(PlayerComponent);"
        },
        {
            "file": "src/systems/CoreSystems.ts",
            "line": 268,
            "column": 30,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (player) {"
        },
        {
            "file": "src/systems/CoreSystems.ts",
            "line": 271,
            "column": 18,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "}"
        },
        {
            "file": "src/systems/CoreSystems.ts",
            "line": 273,
            "column": 79,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "const position = playerEntity.getComponent(PositionComponent);"
        },
        {
            "file": "src/systems/CoreSystems.ts",
            "line": 274,
            "column": 32,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (position) {"
        },
        {
            "file": "src/systems/SaveGameManager.ts",
            "line": 87,
            "column": 9,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log('Creating backup of save data', saveData);"
        },
        {
            "file": "src/systems/SaveGameManager.ts",
            "line": 69,
            "column": 72,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "energy: (playerResources['energy'] as number) || 0,"
        },
        {
            "file": "src/systems/SaveGameManager.ts",
            "line": 71,
            "column": 19,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "},"
        },
        {
            "file": "src/systems/SaveGameManager.ts",
            "line": 72,
            "column": 70,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "research: (playerData['research'] as string[]) || [],"
        },
        {
            "file": "src/systems/SaveGameManager.ts",
            "line": 76,
            "column": 81,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "discovered: (worldData['discovered'] as DiscoveredItem[]) || [],"
        },
        {
            "file": "src/types/template-structure.ts",
            "line": 86,
            "column": 53,
            "pattern": "Synchronous File Operations",
            "severity": "medium",
            "category": "performance",
            "description": "Synchronous file operations block the event loop",
            "suggestion": "Use asynchronous file operations (fs.promises or async/await)",
            "context": "// In a real implementation, we would check fs.existsSync for each required directory"
        },
        {
            "file": "src/types/template-structure.ts",
            "line": 88,
            "column": 69,
            "pattern": "Synchronous File Operations",
            "severity": "medium",
            "category": "performance",
            "description": "Synchronous file operations block the event loop",
            "suggestion": "Use asynchronous file operations (fs.promises or async/await)",
            "context": "// Placeholder check - in real implementation would use fs.existsSync(path.join(rootPath, dir))"
        },
        {
            "file": "src/utils/SimpleFPSCounter.ts",
            "line": 42,
            "column": 17,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log('Performance Monitoring Enabled');"
        },
        {
            "file": "src/utils/SimpleFPSCounter.ts",
            "line": 43,
            "column": 17,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log('Target FPS: 60');"
        },
        {
            "file": "src/utils/SimpleFPSCounter.ts",
            "line": 44,
            "column": 17,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log('Press F3 to hide');"
        },
        {
            "file": "src/utils/SimpleFPSCounter.ts",
            "line": 67,
            "column": 17,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.warn(`Low FPS detected: ${fps}`);"
        },
        {
            "file": "src/utils/SimpleFPSCounter.ts",
            "line": 23,
            "column": 43,
            "pattern": "Long Parameter Lists",
            "severity": "medium",
            "category": "maintainability",
            "description": "Functions with many parameters are hard to maintain",
            "suggestion": "Use object parameters or break into smaller functions",
            "context": "this.fpsText = this.scene.add.text(10, 10, 'FPS: 0', {"
        },
        {
            "file": "src/utils/SimpleFPSCounter.ts",
            "line": 41,
            "column": 34,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (this.isVisible) {"
        },
        {
            "file": "src/utils/SimpleFPSCounter.ts",
            "line": 42,
            "column": 63,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "console.log('Performance Monitoring Enabled');"
        },
        {
            "file": "src/utils/SimpleFPSCounter.ts",
            "line": 57,
            "column": 29,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (fps >= 55) {"
        },
        {
            "file": "src/utils/SimpleFPSCounter.ts",
            "line": 59,
            "column": 36,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "} else if (fps >= 30) {"
        },
        {
            "file": "src/utils/SimpleFPSCounter.ts",
            "line": 61,
            "column": 21,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "} else {"
        },
        {
            "file": "src/utils/SimpleFPSCounter.ts",
            "line": 66,
            "column": 28,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (fps < 30) {"
        },
        {
            "file": "src/utils/Utils.ts",
            "line": 130,
            "column": 13,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.warn(`Timer '${label}' not found`);"
        },
        {
            "file": "src/utils/Utils.ts",
            "line": 144,
            "column": 9,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log(`${timerLabel} took ${duration.toFixed(2)}ms`);"
        },
        {
            "file": "src/utils/Utils.ts",
            "line": 75,
            "column": 21,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "return ("
        },
        {
            "file": "testing/config/playwright-ci.config.ts",
            "line": 5,
            "column": 28,
            "pattern": "Long Parameter Lists",
            "severity": "medium",
            "category": "maintainability",
            "description": "Functions with many parameters are hard to maintain",
            "suggestion": "Use object parameters or break into smaller functions",
            "context": "export default defineConfig({"
        },
        {
            "file": "testing/config/playwright-ci.config.ts",
            "line": 102,
            "column": 8,
            "pattern": "Long Parameter Lists",
            "severity": "medium",
            "category": "maintainability",
            "description": "Functions with many parameters are hard to maintain",
            "suggestion": "Use object parameters or break into smaller functions",
            "context": "...(isCI"
        },
        {
            "file": "testing/config/playwright.config.ts",
            "line": 3,
            "column": 28,
            "pattern": "Long Parameter Lists",
            "severity": "medium",
            "category": "maintainability",
            "description": "Functions with many parameters are hard to maintain",
            "suggestion": "Use object parameters or break into smaller functions",
            "context": "export default defineConfig({"
        },
        {
            "file": "testing/e2e/performance/game-performance.test.ts",
            "line": 33,
            "column": 1,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log('Performance thresholds:', PERFORMANCE_THRESHOLDS);"
        },
        {
            "file": "testing/e2e/performance/game-performance.test.ts",
            "line": 75,
            "column": 9,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log(`Environment: ${isCI ? 'CI' : 'Local'}`);"
        },
        {
            "file": "testing/e2e/performance/game-performance.test.ts",
            "line": 76,
            "column": 9,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log("
        },
        {
            "file": "testing/e2e/performance/game-performance.test.ts",
            "line": 79,
            "column": 9,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log(`Min FPS: ${minFPS.toFixed(2)} (threshold: >${PERFORMANCE_THRESHOLDS.minFPS})`);"
        },
        {
            "file": "testing/e2e/performance/game-performance.test.ts",
            "line": 80,
            "column": 9,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log(`Max FPS: ${maxFPS.toFixed(2)}`);"
        },
        {
            "file": "testing/e2e/performance/game-performance.test.ts",
            "line": 81,
            "column": 9,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log(`FPS samples collected: ${fpsData.length}`);"
        },
        {
            "file": "testing/e2e/performance/game-performance.test.ts",
            "line": 95,
            "column": 13,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log(`FPS Standard Deviation: ${fpsStdDev.toFixed(2)}`);"
        },
        {
            "file": "testing/e2e/performance/game-performance.test.ts",
            "line": 96,
            "column": 13,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log("
        },
        {
            "file": "testing/e2e/performance/game-performance.test.ts",
            "line": 131,
            "column": 9,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log(`Environment: ${isCI ? 'CI' : 'Local'}`);"
        },
        {
            "file": "testing/e2e/performance/game-performance.test.ts",
            "line": 132,
            "column": 9,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log("
        },
        {
            "file": "testing/e2e/performance/game-performance.test.ts",
            "line": 141,
            "column": 13,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.warn("
        },
        {
            "file": "testing/e2e/performance/game-performance.test.ts",
            "line": 169,
            "column": 9,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log(`Environment: ${isCI ? 'CI' : 'Local'}`);"
        },
        {
            "file": "testing/e2e/performance/game-performance.test.ts",
            "line": 170,
            "column": 9,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log(`Initial memory: ${initialMemoryMB.toFixed(2)}MB`);"
        },
        {
            "file": "testing/e2e/performance/game-performance.test.ts",
            "line": 171,
            "column": 9,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log(`Final memory: ${finalMemoryMB.toFixed(2)}MB`);"
        },
        {
            "file": "testing/e2e/performance/game-performance.test.ts",
            "line": 172,
            "column": 9,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log("
        },
        {
            "file": "testing/e2e/performance/game-performance.test.ts",
            "line": 181,
            "column": 13,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.warn("
        },
        {
            "file": "testing/e2e/performance/game-performance.test.ts",
            "line": 223,
            "column": 9,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log(`Environment: ${isCI ? 'CI' : 'Local'}`);"
        },
        {
            "file": "testing/e2e/performance/game-performance.test.ts",
            "line": 224,
            "column": 9,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log("
        },
        {
            "file": "testing/e2e/performance/game-performance.test.ts",
            "line": 230,
            "column": 13,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log(`Freeze durations: ${freezeDurations}ms`);"
        },
        {
            "file": "testing/e2e/performance/game-performance.test.ts",
            "line": 240,
            "column": 13,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log(`Average freeze duration: ${avgFreezeTime.toFixed(2)}ms`);"
        },
        {
            "file": "testing/e2e/performance/game-performance.test.ts",
            "line": 267,
            "column": 9,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log(`Environment: ${isCI ? 'CI' : 'Local'}`);"
        },
        {
            "file": "testing/e2e/performance/game-performance.test.ts",
            "line": 268,
            "column": 9,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log("
        },
        {
            "file": "testing/e2e/performance/game-performance.test.ts",
            "line": 274,
            "column": 13,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log('Resource breakdown:');"
        },
        {
            "file": "testing/e2e/performance/game-performance.test.ts",
            "line": 279,
            "column": 21,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log(`  ${resource.name.split('/').pop()}: ${sizeMB.toFixed(2)}MB`);"
        },
        {
            "file": "testing/e2e/performance/game-performance.test.ts",
            "line": 289,
            "column": 13,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.warn("
        },
        {
            "file": "testing/e2e/performance/game-performance.test.ts",
            "line": 48,
            "column": 36,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "function measureFPS() {"
        },
        {
            "file": "testing/e2e/performance/game-performance.test.ts",
            "line": 49,
            "column": 47,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "const now = performance.now();"
        },
        {
            "file": "testing/e2e/performance/game-performance.test.ts",
            "line": 51,
            "column": 51,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "(window as any).fpsData.push(fps);"
        },
        {
            "file": "testing/e2e/performance/game-performance.test.ts",
            "line": 52,
            "column": 32,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "lastTime = now;"
        },
        {
            "file": "testing/e2e/performance/game-performance.test.ts",
            "line": 55,
            "column": 42,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "// 5 seconds at 60fps"
        },
        {
            "file": "testing/e2e/performance/game-performance.test.ts",
            "line": 90,
            "column": 32,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "const fpsVariance ="
        },
        {
            "file": "testing/e2e/performance/game-performance.test.ts",
            "line": 91,
            "column": 99,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "fpsData.reduce((sum: number, fps: number) => sum + Math.pow(fps - avgFPS, 2), 0) /"
        },
        {
            "file": "testing/e2e/performance/game-performance.test.ts",
            "line": 122,
            "column": 66,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "// Check if any canvas or game element is working"
        },
        {
            "file": "testing/e2e/performance/game-performance.test.ts",
            "line": 123,
            "column": 65,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "const canvas = document.querySelector('canvas');"
        },
        {
            "file": "testing/e2e/performance/game-performance.test.ts",
            "line": 197,
            "column": 44,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "return new Promise(resolve => {"
        },
        {
            "file": "testing/e2e/performance/game-performance.test.ts",
            "line": 198,
            "column": 44,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "function checkFrameTime() {"
        },
        {
            "file": "testing/e2e/performance/game-performance.test.ts",
            "line": 199,
            "column": 51,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "const now = performance.now();"
        },
        {
            "file": "testing/e2e/performance/game-performance.test.ts",
            "line": 202,
            "column": 56,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "// Detect microfreezes (100-1000ms)"
        },
        {
            "file": "testing/e2e/performance/game-performance.test.ts",
            "line": 203,
            "column": 63,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (frameTime > 100 && frameTime < 1000) {"
        },
        {
            "file": "testing/e2e/performance/game-performance.test.ts",
            "line": 205,
            "column": 22,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "}"
        },
        {
            "file": "testing/e2e/performance/game-performance.test.ts",
            "line": 209,
            "column": 71,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "// Stop after 10 seconds or if we have enough data"
        },
        {
            "file": "testing/e2e/performance/game-performance.test.ts",
            "line": 210,
            "column": 75,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (now - startTime > 10000 || freezes.length >= 10) {"
        },
        {
            "file": "testing/e2e/performance/game-performance.test.ts",
            "line": 212,
            "column": 29,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "} else {"
        },
        {
            "file": "testing/e2e/performance/game-performance.test.ts",
            "line": 215,
            "column": 18,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "}"
        },
        {
            "file": "testing/e2e/performance/game-performance.test.ts",
            "line": 258,
            "column": 29,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": ".map(r => ({"
        },
        {
            "file": "testing/e2e/performance/game-performance.test.ts",
            "line": 275,
            "column": 48,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "resourceSizes.forEach(resource => {"
        },
        {
            "file": "testing/e2e/performance/game-performance.test.ts",
            "line": 276,
            "column": 60,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "const sizeMB = resource.size / 1024 / 1024;"
        },
        {
            "file": "testing/e2e/performance/game-performance.test.ts",
            "line": 278,
            "column": 50,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "// Only log resources > 100KB"
        },
        {
            "file": "testing/e2e/performance.spec.ts",
            "line": 49,
            "column": 13,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log('Detected microfreezes:', microfreezes);"
        },
        {
            "file": "testing/e2e/performance.spec.ts",
            "line": 102,
            "column": 38,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "function measureFrame() {"
        },
        {
            "file": "testing/e2e/performance.spec.ts",
            "line": 103,
            "column": 55,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "const currentTime = performance.now();"
        },
        {
            "file": "testing/e2e/performance.spec.ts",
            "line": 104,
            "column": 63,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "const frameTime = currentTime - lastFrameTime;"
        },
        {
            "file": "testing/e2e/performance.spec.ts",
            "line": 105,
            "column": 44,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "frameTimes.push(frameTime);"
        },
        {
            "file": "testing/e2e/performance.spec.ts",
            "line": 106,
            "column": 30,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "frameCount++;"
        },
        {
            "file": "testing/e2e/performance.spec.ts",
            "line": 107,
            "column": 45,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "lastFrameTime = currentTime;"
        },
        {
            "file": "testing/e2e/performance.spec.ts",
            "line": 109,
            "column": 70,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (currentTime - performance.now() < testDuration) {"
        },
        {
            "file": "testing/e2e/performance.spec.ts",
            "line": 111,
            "column": 25,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "} else {"
        },
        {
            "file": "testing/e2e/performance.spec.ts",
            "line": 112,
            "column": 97,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "const totalTime = (currentTime - (performance.now() - testDuration)) / 1000;"
        },
        {
            "file": "testing/e2e/performance.spec.ts",
            "line": 113,
            "column": 59,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "const avgFPS = frameCount / totalTime;"
        },
        {
            "file": "testing/e2e/performance.spec.ts",
            "line": 115,
            "column": 30,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "resolve({"
        },
        {
            "file": "testing/e2e/performance.test.ts",
            "line": 4,
            "column": 44,
            "pattern": "Any Type Usage",
            "severity": "medium",
            "category": "code-quality",
            "description": "Using \"any\" type defeats TypeScript type safety",
            "suggestion": "Replace \"any\" with specific types or proper interfaces",
            "context": "test.beforeEach(async ({ page }: { page: any }) => {"
        },
        {
            "file": "testing/e2e/performance.test.ts",
            "line": 8,
            "column": 70,
            "pattern": "Any Type Usage",
            "severity": "medium",
            "category": "code-quality",
            "description": "Using \"any\" type defeats TypeScript type safety",
            "suggestion": "Replace \"any\" with specific types or proper interfaces",
            "context": "test('should load game within 5 seconds', async ({ page }: { page: any }) => {"
        },
        {
            "file": "testing/e2e/performance.test.ts",
            "line": 13,
            "column": 63,
            "pattern": "Any Type Usage",
            "severity": "medium",
            "category": "code-quality",
            "description": "Using \"any\" type defeats TypeScript type safety",
            "suggestion": "Replace \"any\" with specific types or proper interfaces",
            "context": "test('should maintain stable FPS', async ({ page }: { page: any }) => {"
        },
        {
            "file": "testing/e2e/performance.test.ts",
            "line": 32,
            "column": 68,
            "pattern": "Any Type Usage",
            "severity": "medium",
            "category": "code-quality",
            "description": "Using \"any\" type defeats TypeScript type safety",
            "suggestion": "Replace \"any\" with specific types or proper interfaces",
            "context": "test('should not exceed memory limits', async ({ page }: { page: any }) => {"
        },
        {
            "file": "testing/e2e/performance.test.ts",
            "line": 21,
            "column": 57,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "// Access the game instance if available"
        },
        {
            "file": "testing/fixtures/gameTestUtils.ts",
            "line": 4,
            "column": 18,
            "pattern": "Any Type Usage",
            "severity": "medium",
            "category": "code-quality",
            "description": "Using \"any\" type defeats TypeScript type safety",
            "suggestion": "Replace \"any\" with specific types or proper interfaces",
            "context": "private scene: any;"
        },
        {
            "file": "testing/fixtures/gameTestUtils.ts",
            "line": 10,
            "column": 22,
            "pattern": "Any Type Usage",
            "severity": "medium",
            "category": "code-quality",
            "description": "Using \"any\" type defeats TypeScript type safety",
            "suggestion": "Replace \"any\" with specific types or proper interfaces",
            "context": "createTestScene(): any {"
        },
        {
            "file": "testing/fixtures/gameTestUtils.ts",
            "line": 38,
            "column": 37,
            "pattern": "Any Type Usage",
            "severity": "medium",
            "category": "code-quality",
            "description": "Using \"any\" type defeats TypeScript type safety",
            "suggestion": "Replace \"any\" with specific types or proper interfaces",
            "context": "simulateInput(type: string, data: any): void {"
        },
        {
            "file": "testing/fixtures/gameTestUtils.ts",
            "line": 43,
            "column": 15,
            "pattern": "Any Type Usage",
            "severity": "medium",
            "category": "code-quality",
            "description": "Using \"any\" type defeats TypeScript type safety",
            "suggestion": "Replace \"any\" with specific types or proper interfaces",
            "context": "getScene(): any {"
        },
        {
            "file": "testing/integration/template-structure.test.ts",
            "line": 14,
            "column": 18,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "try {"
        },
        {
            "file": "testing/integration/template-structure.test.ts",
            "line": 15,
            "column": 78,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "const { stdout, stderr } = await execAsync('npm run build', {"
        },
        {
            "file": "testing/integration/template-structure.test.ts",
            "line": 20,
            "column": 56,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "// Build should complete without errors"
        },
        {
            "file": "testing/integration/template-structure.test.ts",
            "line": 21,
            "column": 55,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "expect(stderr).not.toContain('error');"
        },
        {
            "file": "testing/integration/template-structure.test.ts",
            "line": 24,
            "column": 52,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "// Dist directory should be created"
        },
        {
            "file": "testing/integration/template-structure.test.ts",
            "line": 27,
            "column": 56,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "// Main files should be present in dist"
        },
        {
            "file": "testing/integration/template-structure.test.ts",
            "line": 29,
            "column": 30,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "} catch (error) {"
        },
        {
            "file": "testing/integration/template-structure.test.ts",
            "line": 35,
            "column": 18,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "try {"
        },
        {
            "file": "testing/integration/template-structure.test.ts",
            "line": 36,
            "column": 77,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "const { stdout, stderr } = await execAsync('npm run lint', {"
        },
        {
            "file": "testing/integration/template-structure.test.ts",
            "line": 41,
            "column": 62,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "// Lint should not report path-related errors"
        },
        {
            "file": "testing/integration/template-structure.test.ts",
            "line": 42,
            "column": 64,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "expect(stderr).not.toContain('Cannot resolve');"
        },
        {
            "file": "testing/integration/template-structure.test.ts",
            "line": 45,
            "column": 81,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "// Linting errors are acceptable, path resolution errors are not"
        },
        {
            "file": "testing/integration/template-structure.test.ts",
            "line": 46,
            "column": 55,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "const errorMessage = error.toString();"
        },
        {
            "file": "testing/integration/template-structure.test.ts",
            "line": 47,
            "column": 70,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "expect(errorMessage).not.toContain('Cannot resolve');"
        },
        {
            "file": "testing/integration/template-structure.test.ts",
            "line": 53,
            "column": 18,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "try {"
        },
        {
            "file": "testing/integration/template-structure.test.ts",
            "line": 59,
            "column": 71,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "// TypeScript should not report path resolution errors"
        },
        {
            "file": "testing/integration/template-structure.test.ts",
            "line": 60,
            "column": 68,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "expect(stderr).not.toContain('Cannot find module');"
        },
        {
            "file": "testing/integration/template-structure.test.ts",
            "line": 63,
            "column": 80,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "// Type errors are acceptable, module resolution errors are not"
        },
        {
            "file": "testing/integration/template-structure.test.ts",
            "line": 64,
            "column": 55,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "const errorMessage = error.toString();"
        },
        {
            "file": "testing/integration/template-structure.test.ts",
            "line": 65,
            "column": 74,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "expect(errorMessage).not.toContain('Cannot find module');"
        },
        {
            "file": "testing/integration/template-structure.test.ts",
            "line": 75,
            "column": 42,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "requiredDirs.forEach(dir => {"
        },
        {
            "file": "testing/integration/template-structure.test.ts",
            "line": 82,
            "column": 48,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "const fileCount = rootFiles.filter("
        },
        {
            "file": "testing/integration/template-structure.test.ts",
            "line": 84,
            "column": 45,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "!item.startsWith('.') &&"
        },
        {
            "file": "testing/setup.ts",
            "line": 82,
            "column": 21,
            "pattern": "Any Type Usage",
            "severity": "medium",
            "category": "code-quality",
            "description": "Using \"any\" type defeats TypeScript type safety",
            "suggestion": "Replace \"any\" with specific types or proper interfaces",
            "context": "getContext(): any {"
        },
        {
            "file": "testing/setup.ts",
            "line": 14,
            "column": 29,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "const canvas = {"
        },
        {
            "file": "testing/setup.ts",
            "line": 36,
            "column": 20,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "}),"
        },
        {
            "file": "testing/setup.ts",
            "line": 44,
            "column": 37,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (canvas.getContext) {"
        },
        {
            "file": "testing/setup.ts",
            "line": 45,
            "column": 49,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "const ctx = canvas.getContext();"
        },
        {
            "file": "testing/setup.ts",
            "line": 46,
            "column": 27,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (ctx) {"
        },
        {
            "file": "testing/unit/ECSTest.ts",
            "line": 34,
            "column": 13,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.error('Failed to retrieve components');"
        },
        {
            "file": "testing/unit/ECSTest.ts",
            "line": 40,
            "column": 13,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.error('Position component values incorrect');"
        },
        {
            "file": "testing/unit/ECSTest.ts",
            "line": 45,
            "column": 13,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.error('Velocity component values incorrect');"
        },
        {
            "file": "testing/unit/ECSTest.ts",
            "line": 52,
            "column": 13,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.error('Entity query failed');"
        },
        {
            "file": "testing/unit/ECSTest.ts",
            "line": 57,
            "column": 9,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log(`Created entity ${entity.id} with components:`, entity.getComponentTypes());"
        },
        {
            "file": "testing/unit/systems/AssetLoader.test.ts",
            "line": 69,
            "column": 57,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (tag === 'canvas') return mockCanvas;"
        },
        {
            "file": "testing/unit/systems/AssetLoader.test.ts",
            "line": 70,
            "column": 55,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (tag === 'audio') return mockAudio;"
        },
        {
            "file": "testing/unit/systems/AssetLoader.test.ts",
            "line": 91,
            "column": 35,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "const mockManifest = {"
        },
        {
            "file": "testing/unit/systems/AssetLoader.test.ts",
            "line": 92,
            "column": 34,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "version: '1.0.0',"
        },
        {
            "file": "testing/unit/systems/AssetLoader.test.ts",
            "line": 96,
            "column": 69,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "path: './assets/processed/sprites/test.png',"
        },
        {
            "file": "testing/unit/systems/AssetLoader.test.ts",
            "line": 97,
            "column": 40,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "hash: 'abc123',"
        },
        {
            "file": "testing/unit/systems/AssetLoader.test.ts",
            "line": 102,
            "column": 19,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "},"
        },
        {
            "file": "testing/unit/systems/AssetLoader.test.ts",
            "line": 107,
            "column": 19,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "},"
        },
        {
            "file": "testing/unit/systems/AssetLoader.test.ts",
            "line": 111,
            "column": 58,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "(global.fetch as any).mockResolvedValueOnce({"
        },
        {
            "file": "testing/unit/systems/AssetLoader.test.ts",
            "line": 120,
            "column": 60,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "// Resolve the load promise immediately"
        },
        {
            "file": "testing/unit/systems/AssetLoader.test.ts",
            "line": 142,
            "column": 35,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "const mockManifest = {"
        },
        {
            "file": "testing/unit/systems/AssetLoader.test.ts",
            "line": 143,
            "column": 34,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "version: '1.0.0',"
        },
        {
            "file": "testing/unit/systems/AssetLoader.test.ts",
            "line": 147,
            "column": 68,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "path: './assets/processed/images/test.png',"
        },
        {
            "file": "testing/unit/systems/AssetLoader.test.ts",
            "line": 148,
            "column": 40,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "hash: 'abc123',"
        },
        {
            "file": "testing/unit/systems/AssetLoader.test.ts",
            "line": 152,
            "column": 23,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "},"
        },
        {
            "file": "testing/unit/systems/AssetLoader.test.ts",
            "line": 154,
            "column": 72,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "path: './assets/processed/atlases/sprites.png',"
        },
        {
            "file": "testing/unit/systems/AssetLoader.test.ts",
            "line": 155,
            "column": 40,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "hash: 'def456',"
        },
        {
            "file": "testing/unit/systems/AssetLoader.test.ts",
            "line": 159,
            "column": 23,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "},"
        },
        {
            "file": "testing/unit/systems/AssetLoader.test.ts",
            "line": 161,
            "column": 68,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "path: './assets/processed/audio/sound.mp3',"
        },
        {
            "file": "testing/unit/systems/AssetLoader.test.ts",
            "line": 162,
            "column": 40,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "hash: 'ghi789',"
        },
        {
            "file": "testing/unit/systems/AssetLoader.test.ts",
            "line": 167,
            "column": 19,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "},"
        },
        {
            "file": "testing/unit/systems/AssetLoader.test.ts",
            "line": 172,
            "column": 19,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "},"
        },
        {
            "file": "testing/unit/systems/AssetLoader.test.ts",
            "line": 176,
            "column": 54,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "(global.fetch as any).mockResolvedValue({"
        },
        {
            "file": "testing/unit/systems/AssetLoader.test.ts",
            "line": 186,
            "column": 48,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (event === 'filecomplete') {"
        },
        {
            "file": "testing/unit/systems/AssetLoader.test.ts",
            "line": 202,
            "column": 48,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (event === 'filecomplete') {"
        },
        {
            "file": "testing/unit/systems/AssetLoader.test.ts",
            "line": 219,
            "column": 48,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (event === 'filecomplete') {"
        },
        {
            "file": "testing/unit/systems/AssetLoader.test.ts",
            "line": 226,
            "column": 60,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "expect(progressCallback).toHaveBeenCalledWith({"
        },
        {
            "file": "testing/unit/systems/AssetLoader.test.ts",
            "line": 227,
            "column": 39,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "category: 'essential',"
        },
        {
            "file": "testing/unit/systems/AssetLoader.test.ts",
            "line": 237,
            "column": 35,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "const mockManifest = {"
        },
        {
            "file": "testing/unit/systems/AssetLoader.test.ts",
            "line": 238,
            "column": 34,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "version: '1.0.0',"
        },
        {
            "file": "testing/unit/systems/AssetLoader.test.ts",
            "line": 245,
            "column": 54,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "(global.fetch as any).mockResolvedValue({"
        },
        {
            "file": "testing/unit/systems/AssetLoader.test.ts",
            "line": 256,
            "column": 35,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "const mockManifest = {"
        },
        {
            "file": "testing/unit/systems/AssetLoader.test.ts",
            "line": 257,
            "column": 34,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "version: '1.0.0',"
        },
        {
            "file": "testing/unit/systems/AssetLoader.test.ts",
            "line": 261,
            "column": 44,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "path: './test.png',"
        },
        {
            "file": "testing/unit/systems/AssetLoader.test.ts",
            "line": 262,
            "column": 37,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "hash: 'abc',"
        },
        {
            "file": "testing/unit/systems/AssetLoader.test.ts",
            "line": 267,
            "column": 19,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "},"
        },
        {
            "file": "testing/unit/systems/AssetLoader.test.ts",
            "line": 272,
            "column": 54,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "(global.fetch as any).mockResolvedValue({"
        },
        {
            "file": "testing/unit/systems/AssetLoader.test.ts",
            "line": 280,
            "column": 40,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "expect(assetInfo).toEqual({"
        },
        {
            "file": "testing/unit/systems/AssetLoader.test.ts",
            "line": 281,
            "column": 36,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "path: './test.png',"
        },
        {
            "file": "testing/unit/systems/AssetLoader.test.ts",
            "line": 282,
            "column": 29,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "hash: 'abc',"
        },
        {
            "file": "testing/unit/utils/SimpleFPSCounter.test.ts",
            "line": 20,
            "column": 57,
            "pattern": "Any Type Usage",
            "severity": "medium",
            "category": "code-quality",
            "description": "Using \"any\" type defeats TypeScript type safety",
            "suggestion": "Replace \"any\" with specific types or proper interfaces",
            "context": "text: (x: number, y: number, text: string, style: any) => MockGameObject;"
        },
        {
            "file": "testing/unit/utils/SimpleFPSCounter.test.ts",
            "line": 74,
            "column": 60,
            "pattern": "Long Parameter Lists",
            "severity": "medium",
            "category": "maintainability",
            "description": "Functions with many parameters are hard to maintain",
            "suggestion": "Use object parameters or break into smaller functions",
            "context": "expect(mockScene.add.text).toHaveBeenCalledWith("
        },
        {
            "file": "testing/unit/utils/SimpleFPSCounter.test.ts",
            "line": 74,
            "column": 61,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "expect(mockScene.add.text).toHaveBeenCalledWith("
        },
        {
            "file": "testing/unit/utils/SimpleFPSCounter.test.ts",
            "line": 75,
            "column": 20,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "10,"
        },
        {
            "file": "testing/unit/utils/SimpleFPSCounter.test.ts",
            "line": 77,
            "column": 26,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "'FPS: 0',"
        },
        {
            "file": "testing/unit/utils/SimpleFPSCounter.test.ts",
            "line": 78,
            "column": 42,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "expect.objectContaining({"
        },
        {
            "file": "testing/unit/utils/SimpleFPSCounter.test.ts",
            "line": 79,
            "column": 44,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "font: '16px monospace',"
        },
        {
            "file": "testing/unit/utils/SimpleFPSCounter.test.ts",
            "line": 80,
            "column": 38,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "color: '#00ff00',"
        },
        {
            "file": "testing/unit/utils/SimpleFPSCounter.test.ts",
            "line": 88,
            "column": 30,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "'keydown-F3',"
        },
        {
            "file": "testing/unit/utils/SimpleFPSCounter.test.ts",
            "line": 172,
            "column": 57,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "// Create new counter in production mode"
        },
        {
            "file": "testing/unit/utils/SimpleFPSCounter.test.ts",
            "line": 173,
            "column": 76,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "const prodCounter = new SimpleFPSCounter(mockScene as any);"
        },
        {
            "file": "testing/unit/utils/SimpleFPSCounter.test.ts",
            "line": 177,
            "column": 42,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "// Update should not fail"
        },
        {
            "file": "testing/unit/utils/SimpleFPSCounter.test.ts",
            "line": 178,
            "column": 38,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "prodCounter.update();"
        },
        {
            "file": "testing/unit/utils/SimpleFPSCounter.test.ts",
            "line": 179,
            "column": 46,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "prodCounter.setVisible(true);"
        },
        {
            "file": "testing/unit/utils/SimpleFPSCounter.test.ts",
            "line": 182,
            "column": 48,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "// Restore original environment"
        },
        {
            "file": "tools/deployment/deploy.js",
            "line": 31,
            "column": 5,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log(`🔄 ${description}...`);"
        },
        {
            "file": "tools/deployment/deploy.js",
            "line": 34,
            "column": 9,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log(`✅ ${description} completed`);"
        },
        {
            "file": "tools/deployment/deploy.js",
            "line": 37,
            "column": 9,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.error(`❌ ${description} failed:`, error.message);"
        },
        {
            "file": "tools/deployment/deploy.js",
            "line": 43,
            "column": 5,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log(`🏥 Health checking ${url}...`);"
        },
        {
            "file": "tools/deployment/deploy.js",
            "line": 46,
            "column": 9,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log('✅ Health check passed');"
        },
        {
            "file": "tools/deployment/deploy.js",
            "line": 49,
            "column": 9,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.error('❌ Health check failed:', error.message);"
        },
        {
            "file": "tools/deployment/deploy.js",
            "line": 57,
            "column": 5,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log(`🚀 Starting blue-green deployment to ${environment}`);"
        },
        {
            "file": "tools/deployment/deploy.js",
            "line": 58,
            "column": 5,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log(`📦 Version: ${version}`);"
        },
        {
            "file": "tools/deployment/deploy.js",
            "line": 77,
            "column": 9,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log('⏳ Waiting for green deployment to be ready...');"
        },
        {
            "file": "tools/deployment/deploy.js",
            "line": 92,
            "column": 17,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log('🎉 Blue-green deployment completed successfully!');"
        },
        {
            "file": "tools/deployment/deploy.js",
            "line": 99,
            "column": 9,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.error('💥 Deployment failed, initiating rollback...');"
        },
        {
            "file": "tools/deployment/deploy.js",
            "line": 107,
            "column": 9,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.error('Deployment failed:', error.message);"
        },
        {
            "file": "tools/deployment/deploy.js",
            "line": 80,
            "column": 43,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "// Switch traffic to green"
        },
        {
            "file": "tools/deployment/deploy.js",
            "line": 86,
            "column": 43,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "// Stop blue (old version)"
        },
        {
            "file": "tools/deployment/deploy.js",
            "line": 90,
            "column": 19,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": ");"
        },
        {
            "file": "tools/deployment/deploy.js",
            "line": 92,
            "column": 81,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "console.log('🎉 Blue-green deployment completed successfully!');"
        },
        {
            "file": "tools/deployment/deploy.js",
            "line": 94,
            "column": 21,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "} else {"
        },
        {
            "file": "tools/deployment/rollback.js",
            "line": 20,
            "column": 5,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log(`🔄 ${description}...`);"
        },
        {
            "file": "tools/deployment/rollback.js",
            "line": 23,
            "column": 9,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log(`✅ ${description} completed`);"
        },
        {
            "file": "tools/deployment/rollback.js",
            "line": 26,
            "column": 9,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.error(`❌ ${description} failed:`, error.message);"
        },
        {
            "file": "tools/deployment/rollback.js",
            "line": 34,
            "column": 5,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log(`⏪ Starting rollback for ${environment}`);"
        },
        {
            "file": "tools/deployment/rollback.js",
            "line": 37,
            "column": 9,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log(`📦 Rolling back to version: ${version}`);"
        },
        {
            "file": "tools/deployment/rollback.js",
            "line": 39,
            "column": 9,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log('📦 Rolling back to previous version');"
        },
        {
            "file": "tools/deployment/rollback.js",
            "line": 44,
            "column": 9,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log('🚨 Emergency rollback initiated - 2 minute target');"
        },
        {
            "file": "tools/deployment/rollback.js",
            "line": 64,
            "column": 9,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log('🎉 Rollback completed successfully!');"
        },
        {
            "file": "tools/deployment/rollback.js",
            "line": 65,
            "column": 9,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log('⏱️  Rollback completed within 2-minute target');"
        },
        {
            "file": "tools/deployment/rollback.js",
            "line": 67,
            "column": 9,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.error('💥 Rollback failed:', error.message);"
        },
        {
            "file": "tools/deployment/rollback.js",
            "line": 68,
            "column": 9,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.error('🚨 Manual intervention required!');"
        },
        {
            "file": "tools/deployment/rollback.js",
            "line": 74,
            "column": 5,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.error('Rollback failed:', error.message);"
        },
        {
            "file": "tools/development/performance-check.js",
            "line": 30,
            "column": 49,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (!currentPath.endsWith('.map')) {"
        },
        {
            "file": "tools/development/performance-check.js",
            "line": 35,
            "column": 36,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "files.forEach(file => {"
        },
        {
            "file": "tools/development/performance-check.js",
            "line": 89,
            "column": 58,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (avgFPS < PERFORMANCE_THRESHOLDS.minFPS) {"
        },
        {
            "file": "tools/development/performance-check.js",
            "line": 92,
            "column": 19,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": ");"
        },
        {
            "file": "tools/development/performance-check.js",
            "line": 97,
            "column": 40,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (results.fps.baseline) {"
        },
        {
            "file": "tools/development/performance-check.js",
            "line": 98,
            "column": 92,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "const degradation = (results.fps.baseline - avgFPS) / results.fps.baseline;"
        },
        {
            "file": "tools/development/performance-check.js",
            "line": 101,
            "column": 81,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (degradation > PERFORMANCE_THRESHOLDS.degradationTolerance) {"
        },
        {
            "file": "tools/development/performance-check.js",
            "line": 104,
            "column": 23,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": ");"
        },
        {
            "file": "tools/development/performance-check.js",
            "line": 113,
            "column": 50,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (results.microfreezes.count > 5) {"
        },
        {
            "file": "tools/development/performance-check.js",
            "line": 114,
            "column": 67,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "console.error('❌ Too many microfreezes detected');"
        },
        {
            "file": "tools/development/script-runner.js",
            "line": 46,
            "column": 40,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "for (const file of files) {"
        },
        {
            "file": "tools/development/script-runner.js",
            "line": 47,
            "column": 56,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "const filePath = join(path, file.name);"
        },
        {
            "file": "tools/development/script-runner.js",
            "line": 48,
            "column": 42,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (file.isDirectory()) {"
        },
        {
            "file": "tools/development/script-runner.js",
            "line": 50,
            "column": 25,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "} else {"
        },
        {
            "file": "tools/development/script-runner.js",
            "line": 92,
            "column": 10,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "}"
        },
        {
            "file": "tools/development/script-runner.js",
            "line": 113,
            "column": 12,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "});"
        },
        {
            "file": "tools/development/script-runner.js",
            "line": 116,
            "column": 30,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (code === 0) {"
        },
        {
            "file": "tools/development/script-runner.js",
            "line": 118,
            "column": 21,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "} else {"
        },
        {
            "file": "tools/development/script-runner.js",
            "line": 121,
            "column": 12,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "});"
        },
        {
            "file": "tools/development/script-runner.js",
            "line": 132,
            "column": 60,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "const { dryRun = false, backup = false } = options;"
        },
        {
            "file": "tools/development/script-runner.js",
            "line": 134,
            "column": 50,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "log('info', 'Starting cache cleanup...');"
        },
        {
            "file": "tools/development/script-runner.js",
            "line": 148,
            "column": 11,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "];"
        },
        {
            "file": "tools/development/script-runner.js",
            "line": 152,
            "column": 68,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (removePathSafely(path, desc, { dryRun, backup })) {"
        },
        {
            "file": "tools/development/script-runner.js",
            "line": 155,
            "column": 10,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "}"
        },
        {
            "file": "tools/development/script-runner.js",
            "line": 168,
            "column": 48,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (process.platform === 'win32') {"
        },
        {
            "file": "tools/development/script-runner.js",
            "line": 170,
            "column": 21,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "} else {"
        },
        {
            "file": "tools/development/script-runner.js",
            "line": 194,
            "column": 52,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "log('info', 'Generating health report...');"
        },
        {
            "file": "tools/development/script-runner.js",
            "line": 197,
            "column": 95,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "const timestamp = new Date().toISOString().replace(/[:.]/g, '-').split('T')[0] + '_' +"
        },
        {
            "file": "tools/development/script-runner.js",
            "line": 232,
            "column": 34,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "case 'cleanup-cache':"
        },
        {
            "file": "tools/development/script-runner.js",
            "line": 233,
            "column": 45,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "await scripts.cleanupCache({"
        },
        {
            "file": "tools/development/script-runner.js",
            "line": 236,
            "column": 20,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "});"
        },
        {
            "file": "tools/development/script-runner.js",
            "line": 237,
            "column": 23,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "break;"
        },
        {
            "file": "tools/development/script-runner.js",
            "line": 239,
            "column": 37,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "case 'test-performance':"
        },
        {
            "file": "tools/development/script-runner.js",
            "line": 240,
            "column": 83,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "const timeoutArg = args.find(arg => arg.startsWith('--timeout='));"
        },
        {
            "file": "tools/development/script-runner.js",
            "line": 242,
            "column": 104,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "const extraArgs = args.filter(arg => !arg.startsWith('--timeout=') && arg !== command);"
        },
        {
            "file": "tools/development/script-runner.js",
            "line": 244,
            "column": 71,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "await scripts.testPerformance({ timeout, extraArgs });"
        },
        {
            "file": "tools/development/script-runner.js",
            "line": 245,
            "column": 23,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "break;"
        },
        {
            "file": "tools/development/script-runner.js",
            "line": 247,
            "column": 43,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "case 'generate-health-report':"
        },
        {
            "file": "tools/development/script-runner.js",
            "line": 248,
            "column": 54,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "await scripts.generateHealthReport();"
        },
        {
            "file": "tools/development/script-runner.js",
            "line": 249,
            "column": 23,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "break;"
        },
        {
            "file": "tools/development/script-runner.js",
            "line": 251,
            "column": 21,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "default:"
        },
        {
            "file": "tools/maintenance/ci-verification.js",
            "line": 72,
            "column": 9,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log(`${prefix} [${timestamp}] ${message}`);"
        },
        {
            "file": "tools/maintenance/ci-verification.js",
            "line": 354,
            "column": 5,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log(`"
        },
        {
            "file": "tools/maintenance/ci-verification.js",
            "line": 82,
            "column": 62,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "const workflowPath = join(workflowDir, workflow);"
        },
        {
            "file": "tools/maintenance/ci-verification.js",
            "line": 84,
            "column": 45,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (!existsSync(workflowPath)) {"
        },
        {
            "file": "tools/maintenance/ci-verification.js",
            "line": 85,
            "column": 69,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "this.log(`Workflow ${workflow} not found`, 'error');"
        },
        {
            "file": "tools/maintenance/ci-verification.js",
            "line": 86,
            "column": 34,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "allValid = false;"
        },
        {
            "file": "tools/maintenance/ci-verification.js",
            "line": 90,
            "column": 18,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "try {"
        },
        {
            "file": "tools/maintenance/ci-verification.js",
            "line": 93,
            "column": 51,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "// Basic YAML structure validation"
        },
        {
            "file": "tools/maintenance/ci-verification.js",
            "line": 97,
            "column": 18,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "}"
        },
        {
            "file": "tools/maintenance/ci-verification.js",
            "line": 102,
            "column": 18,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "}"
        },
        {
            "file": "tools/maintenance/ci-verification.js",
            "line": 109,
            "column": 50,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "// Check for required permissions"
        },
        {
            "file": "tools/maintenance/ci-verification.js",
            "line": 116,
            "column": 46,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "// Check for timeout settings"
        },
        {
            "file": "tools/maintenance/ci-verification.js",
            "line": 119,
            "column": 18,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "}"
        },
        {
            "file": "tools/maintenance/ci-verification.js",
            "line": 123,
            "column": 30,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "} catch (error) {"
        },
        {
            "file": "tools/maintenance/ci-verification.js",
            "line": 144,
            "column": 52,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "for (const script of criticalScripts) {"
        },
        {
            "file": "tools/maintenance/ci-verification.js",
            "line": 145,
            "column": 22,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "try {"
        },
        {
            "file": "tools/maintenance/ci-verification.js",
            "line": 147,
            "column": 39,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "execSync(script, {"
        },
        {
            "file": "tools/maintenance/ci-verification.js",
            "line": 148,
            "column": 39,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "stdio: 'pipe',"
        },
        {
            "file": "tools/maintenance/ci-verification.js",
            "line": 151,
            "column": 24,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "});"
        },
        {
            "file": "tools/maintenance/ci-verification.js",
            "line": 153,
            "column": 34,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "} catch (error) {"
        },
        {
            "file": "tools/maintenance/ci-verification.js",
            "line": 173,
            "column": 91,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "const workflowPath = join(PROJECT_ROOT, '.github', 'workflows', workflow);"
        },
        {
            "file": "tools/maintenance/ci-verification.js",
            "line": 174,
            "column": 25,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "return {"
        },
        {
            "file": "tools/maintenance/ci-verification.js",
            "line": 211,
            "column": 40,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (existsSync(distPath)) {"
        },
        {
            "file": "tools/maintenance/ci-verification.js",
            "line": 216,
            "column": 40,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "execSync('npm run build', {"
        },
        {
            "file": "tools/maintenance/ci-verification.js",
            "line": 217,
            "column": 31,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "stdio: 'pipe',"
        },
        {
            "file": "tools/maintenance/ci-verification.js",
            "line": 223,
            "column": 41,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (!existsSync(distPath)) {"
        },
        {
            "file": "tools/maintenance/ci-verification.js",
            "line": 224,
            "column": 68,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "this.log('Build artifacts not generated', 'error');"
        },
        {
            "file": "tools/maintenance/ci-verification.js",
            "line": 240,
            "column": 15,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "];"
        },
        {
            "file": "tools/maintenance/ci-verification.js",
            "line": 242,
            "column": 49,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "for (const file of essentialFiles) {"
        },
        {
            "file": "tools/maintenance/ci-verification.js",
            "line": 243,
            "column": 85,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "const hasFile = artifacts.some(artifact => artifact.includes(file));"
        },
        {
            "file": "tools/maintenance/ci-verification.js",
            "line": 244,
            "column": 31,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (hasFile) {"
        },
        {
            "file": "tools/maintenance/ci-verification.js",
            "line": 246,
            "column": 25,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "} else {"
        },
        {
            "file": "tools/maintenance/ci-verification.js",
            "line": 252,
            "column": 72,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "for (const { pattern, description } of essentialPatterns) {"
        },
        {
            "file": "tools/maintenance/ci-verification.js",
            "line": 253,
            "column": 87,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "const hasPattern = artifacts.some(artifact => pattern.test(artifact));"
        },
        {
            "file": "tools/maintenance/ci-verification.js",
            "line": 254,
            "column": 34,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (hasPattern) {"
        },
        {
            "file": "tools/maintenance/ci-verification.js",
            "line": 256,
            "column": 25,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "} else {"
        },
        {
            "file": "tools/maintenance/ci-verification.js",
            "line": 275,
            "column": 31,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "stdio: 'pipe',"
        },
        {
            "file": "tools/maintenance/ci-verification.js",
            "line": 301,
            "column": 42,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "const startTime = Date.now();"
        },
        {
            "file": "tools/maintenance/ci-verification.js",
            "line": 303,
            "column": 18,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "try {"
        },
        {
            "file": "tools/maintenance/ci-verification.js",
            "line": 304,
            "column": 48,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "const result = await test.fn();"
        },
        {
            "file": "tools/maintenance/ci-verification.js",
            "line": 305,
            "column": 57,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "const duration = Date.now() - startTime;"
        },
        {
            "file": "tools/maintenance/ci-verification.js",
            "line": 307,
            "column": 36,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "this.results.push({"
        },
        {
            "file": "tools/maintenance/ci-verification.js",
            "line": 310,
            "column": 30,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "duration,"
        },
        {
            "file": "tools/maintenance/ci-verification.js",
            "line": 312,
            "column": 20,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "});"
        },
        {
            "file": "tools/maintenance/ci-verification.js",
            "line": 314,
            "column": 31,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (!result) {"
        },
        {
            "file": "tools/maintenance/ci-verification.js",
            "line": 317,
            "column": 30,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "} catch (error) {"
        },
        {
            "file": "tools/maintenance/ci-verification.js",
            "line": 318,
            "column": 36,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "this.results.push({"
        },
        {
            "file": "tools/maintenance/ci-verification.js",
            "line": 320,
            "column": 39,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "status: 'failure',"
        },
        {
            "file": "tools/maintenance/ci-verification.js",
            "line": 323,
            "column": 20,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "});"
        },
        {
            "file": "tools/maintenance/test-github-actions.js",
            "line": 27,
            "column": 9,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log(`${prefix} [${timestamp}] ${message}`);"
        },
        {
            "file": "tools/maintenance/test-github-actions.js",
            "line": 195,
            "column": 17,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log(`❌ ${result.message}`);"
        },
        {
            "file": "tools/maintenance/test-github-actions.js",
            "line": 236,
            "column": 5,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log(`"
        },
        {
            "file": "tools/maintenance/test-github-actions.js",
            "line": 49,
            "column": 37,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "execSync(buildCommand, {"
        },
        {
            "file": "tools/maintenance/test-github-actions.js",
            "line": 50,
            "column": 31,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "stdio: 'pipe',"
        },
        {
            "file": "tools/maintenance/test-github-actions.js",
            "line": 60,
            "column": 32,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (error.stdout) {"
        },
        {
            "file": "tools/maintenance/test-github-actions.js",
            "line": 63,
            "column": 32,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (error.stderr) {"
        },
        {
            "file": "tools/maintenance/test-github-actions.js",
            "line": 79,
            "column": 18,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "try {"
        },
        {
            "file": "tools/maintenance/test-github-actions.js",
            "line": 81,
            "column": 35,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "execSync(script, {"
        },
        {
            "file": "tools/maintenance/test-github-actions.js",
            "line": 82,
            "column": 35,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "stdio: 'pipe',"
        },
        {
            "file": "tools/maintenance/test-github-actions.js",
            "line": 84,
            "column": 20,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "});"
        },
        {
            "file": "tools/maintenance/test-github-actions.js",
            "line": 86,
            "column": 30,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "} catch (error) {"
        },
        {
            "file": "tools/maintenance/test-github-actions.js",
            "line": 111,
            "column": 44,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (existsSync(workflowPath)) {"
        },
        {
            "file": "tools/maintenance/test-github-actions.js",
            "line": 113,
            "column": 21,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "} else {"
        },
        {
            "file": "tools/maintenance/test-github-actions.js",
            "line": 114,
            "column": 60,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "this.log(`${workflow} - MISSING`, 'error');"
        },
        {
            "file": "tools/maintenance/test-github-actions.js",
            "line": 141,
            "column": 35,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "execSync(tagCommand, {"
        },
        {
            "file": "tools/maintenance/test-github-actions.js",
            "line": 142,
            "column": 31,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "stdio: 'pipe',"
        },
        {
            "file": "tools/maintenance/test-github-actions.js",
            "line": 187,
            "column": 27,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (!result) {"
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 96,
            "column": 13,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.warn('Could not load health thresholds, using defaults');"
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 123,
            "column": 9,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log('🔨 Checking build health...');"
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 251,
            "column": 9,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log('⚡ Checking performance health...');"
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 302,
            "column": 9,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log('🔒 Checking security health...');"
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 368,
            "column": 9,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log('📦 Checking dependency health...');"
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 427,
            "column": 9,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log('🏥 Starting comprehensive health check...\\n');"
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 468,
            "column": 13,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log('\\n' + '='.repeat(60));"
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 469,
            "column": 13,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log('🏥 FRAMEWORK HEALTH REPORT');"
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 470,
            "column": 13,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log('='.repeat(60));"
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 471,
            "column": 13,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log(`📅 Generated: ${new Date(report.timestamp).toLocaleString()}`);"
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 472,
            "column": 13,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log(`🎯 Overall Health Score: ${report.overallScore}/${report.maxScore}`);"
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 473,
            "column": 13,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log(`📊 Health Status: ${report.status.toUpperCase()}`);"
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 474,
            "column": 13,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log("
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 477,
            "column": 13,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log(`🟢 Node.js: ${report.environment.nodeVersion}`);"
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 478,
            "column": 13,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log(`📦 npm: ${report.environment.npmVersion}`);"
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 479,
            "column": 13,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log('');"
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 485,
            "column": 17,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log("
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 490,
            "column": 21,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log(`   ${detail}`);"
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 494,
            "column": 21,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log(`   📈 Metrics: ${JSON.stringify(category.metrics)}`);"
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 496,
            "column": 17,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log('');"
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 500,
            "column": 13,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log('='.repeat(60));"
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 502,
            "column": 17,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log('🎉 Project health is EXCELLENT! Keep up the great work.');"
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 504,
            "column": 17,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log('⚠️ Project health needs ATTENTION. Review warnings above.');"
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 506,
            "column": 17,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log('🚨 Project health is CRITICAL. Immediate action required.');"
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 508,
            "column": 13,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log('='.repeat(60));"
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 513,
            "column": 13,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log(`📄 Detailed report saved to: ${reportPath}`);"
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 518,
            "column": 13,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.error('❌ Health check failed with error:', error);"
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 88,
            "column": 46,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "const thresholdsPath = path.join("
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 103,
            "column": 47,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "const stdout = execSync(command, {"
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 105,
            "column": 35,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "encoding: 'utf-8',"
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 108,
            "column": 21,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "return {"
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 114,
            "column": 21,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "return {"
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 150,
            "column": 72,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (buildCheck.time <= this.thresholds.build.max_time_ms) {"
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 151,
            "column": 35,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "result.score += 5;"
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 155,
            "column": 21,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "} else {"
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 168,
            "column": 43,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (distStats.isDirectory()) {"
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 169,
            "column": 67,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "const sizeCheck = this.execCommand('du -sh dist');"
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 170,
            "column": 41,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (sizeCheck.success) {"
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 172,
            "column": 37,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (sizeMatch) {"
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 204,
            "column": 70,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (testCheck.time <= this.thresholds.test.max_time_ms) {"
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 205,
            "column": 35,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "result.score += 5;"
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 209,
            "column": 21,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "} else {"
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 226,
            "column": 33,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (coverageMatch) {"
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 227,
            "column": 63,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "const coverage = parseFloat(coverageMatch[1]);"
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 228,
            "column": 53,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "result.metrics!.coverage = coverage;"
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 229,
            "column": 77,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (coverage >= this.thresholds.test.min_coverage_percent) {"
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 230,
            "column": 39,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "result.score += 5;"
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 234,
            "column": 25,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "} else {"
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 239,
            "column": 21,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "} else {"
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 266,
            "column": 37,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (perfCheck.success) {"
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 267,
            "column": 36,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "result.score += 15;"
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 270,
            "column": 50,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "// Try to extract FPS information"
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 272,
            "column": 32,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (fpsMatch) {"
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 273,
            "column": 57,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "const fps = parseFloat(fpsMatch[1]);"
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 274,
            "column": 47,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "result.metrics!.fps = fps;"
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 275,
            "column": 70,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (fps >= this.thresholds.performance.min_fps) {"
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 276,
            "column": 43,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "result.score += 5;"
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 280,
            "column": 29,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "} else {"
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 286,
            "column": 21,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "} else {"
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 287,
            "column": 67,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "result.details.push('❌ Performance tests failed');"
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 320,
            "column": 29,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (vulnMatch) {"
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 321,
            "column": 58,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "const vulnCount = parseInt(vulnMatch[1]);"
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 322,
            "column": 61,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "result.metrics!.vulnerabilities = vulnCount;"
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 323,
            "column": 81,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (vulnCount <= this.thresholds.security.max_vulnerabilities) {"
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 324,
            "column": 39,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "result.score += 5;"
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 328,
            "column": 25,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "} else {"
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 333,
            "column": 21,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "} else {"
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 347,
            "column": 18,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "try {"
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 348,
            "column": 68,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "await fs.access(path.join(this.projectRoot, file));"
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 349,
            "column": 42,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "securityFileFound = true;"
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 381,
            "column": 47,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (outdatedCheck.stdout.trim()) {"
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 382,
            "column": 71,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "const outdatedData = JSON.parse(outdatedCheck.stdout);"
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 383,
            "column": 72,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "const outdatedCount = Object.keys(outdatedData).length;"
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 384,
            "column": 70,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "result.metrics!.outdatedDependencies = outdatedCount;"
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 386,
            "column": 82,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (outdatedCount <= this.thresholds.dependencies.max_outdated) {"
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 387,
            "column": 39,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "result.score += 5;"
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 391,
            "column": 25,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "} else {"
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 396,
            "column": 21,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "} else {"
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 397,
            "column": 35,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "result.score += 5;"
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 401,
            "column": 74,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (outdatedCheck.stdout.includes('No package.json found')) {"
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 403,
            "column": 21,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "} else {"
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 404,
            "column": 103,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "result.score += 3; // Partial credit for having dependencies but outdated check failed"
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 482,
            "column": 56,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "for (const category of report.categories) {"
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 483,
            "column": 35,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "const statusIcon ="
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 487,
            "column": 19,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": ");"
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 489,
            "column": 57,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "for (const detail of category.details) {"
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 491,
            "column": 18,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "}"
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 493,
            "column": 84,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (category.metrics && Object.keys(category.metrics).length > 0) {"
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 495,
            "column": 18,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "}"
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 501,
            "column": 47,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (report.status === 'healthy') {"
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 503,
            "column": 54,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "} else if (report.status === 'warning') {"
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 505,
            "column": 21,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "} else {"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 285,
            "column": 13,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.warn("
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 432,
            "column": 9,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log('🔍 Scanning for technical debt patterns...');"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 435,
            "column": 9,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log(`📁 Found ${files.length} files to analyze`);"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 485,
            "column": 13,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log('\\n' + '='.repeat(60));"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 486,
            "column": 13,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log('🏗️ TECHNICAL DEBT ANALYSIS REPORT');"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 487,
            "column": 13,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log('='.repeat(60));"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 488,
            "column": 13,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log(`📅 Generated: ${new Date(report.timestamp).toLocaleString()}`);"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 489,
            "column": 13,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log(`📊 Found ${report.summary.totalItems} technical debt items`);"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 490,
            "column": 13,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log(`📁 Scanned ${report.summary.filesScanned} files`);"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 491,
            "column": 13,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log(`🎯 Project Health: ${report.summary.projectHealth.toUpperCase()}`);"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 492,
            "column": 13,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log('');"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 495,
            "column": 13,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log('📈 SEVERITY BREAKDOWN:');"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 499,
            "column": 17,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log(`   ${emoji} ${severity.toUpperCase()}: ${count}`);"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 501,
            "column": 13,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log('');"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 504,
            "column": 13,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log('🗂️ CATEGORY BREAKDOWN:');"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 506,
            "column": 17,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log(`   📌 ${category}: ${count}`);"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 508,
            "column": 13,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log('');"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 511,
            "column": 13,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log('💡 RECOMMENDATIONS:');"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 513,
            "column": 17,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log(`   ${recommendation}`);"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 515,
            "column": 13,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log('');"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 519,
            "column": 17,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log('🔍 TOP ISSUES TO ADDRESS:');"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 523,
            "column": 21,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log(`   ${severityEmoji} ${item.file}:${item.line} - ${item.pattern}`);"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 524,
            "column": 21,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log(`      💬 ${item.description}`);"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 525,
            "column": 21,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log(`      💡 ${item.suggestion}`);"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 526,
            "column": 21,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log(`      📝 Context: ${item.context}`);"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 527,
            "column": 21,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log('');"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 531,
            "column": 21,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log(`   ... and ${report.items.length - 10} more items`);"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 532,
            "column": 21,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log('');"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 536,
            "column": 13,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log('='.repeat(60));"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 541,
            "column": 13,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log(`📄 Detailed report saved to: ${reportPath}`);"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 547,
            "column": 13,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.error('❌ Technical debt analysis failed:', error);"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 129,
            "column": 27,
            "pattern": "Suppressed TypeScript Errors",
            "severity": "medium",
            "category": "code-quality",
            "description": "TypeScript error suppression should be used sparingly",
            "suggestion": "Fix underlying type issues instead of suppressing errors",
            "context": "pattern: /@ts-ignore|@ts-expect-error/g,"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 129,
            "column": 38,
            "pattern": "Suppressed TypeScript Errors",
            "severity": "medium",
            "category": "code-quality",
            "description": "TypeScript error suppression should be used sparingly",
            "suggestion": "Fix underlying type issues instead of suppressing errors",
            "context": "pattern: /@ts-ignore|@ts-expect-error/g,"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 97,
            "column": 67,
            "pattern": "Long Parameter Lists",
            "severity": "medium",
            "category": "maintainability",
            "description": "Functions with many parameters are hard to maintain",
            "suggestion": "Use object parameters or break into smaller functions",
            "context": "pattern: /console\\.(log|debug|info|warn|error)\\s*\\(/gi,"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 147,
            "column": 34,
            "pattern": "Long Parameter Lists",
            "severity": "medium",
            "category": "maintainability",
            "description": "Functions with many parameters are hard to maintain",
            "suggestion": "Use object parameters or break into smaller functions",
            "context": "pattern: /for\\s*\\([^}]*\\{[^}]*for\\s*\\(/gs,"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 178,
            "column": 109,
            "pattern": "Long Parameter Lists",
            "severity": "medium",
            "category": "maintainability",
            "description": "Functions with many parameters are hard to maintain",
            "suggestion": "Use object parameters or break into smaller functions",
            "context": "/^(?!\\s*\\/\\*\\*|\\s*\\/\\/).*function\\s+\\w+\\s*\\(|^(?!\\s*\\/\\*\\*|\\s*\\/\\/).*const\\s+\\w+\\s*=\\s*\\(/gm,"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 71,
            "column": 14,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "{"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 72,
            "column": 39,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "name: 'TODO Comments',"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 73,
            "column": 75,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "pattern: /\\/\\/ TODO[:\\s]*(.*)|\\/\\* TODO[:\\s]*(.*?)\\*\\//gi,"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 74,
            "column": 33,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "severity: 'low',"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 75,
            "column": 45,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "category: 'maintainability',"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 76,
            "column": 71,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "description: 'TODO comments indicate incomplete work',"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 79,
            "column": 14,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "{"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 80,
            "column": 40,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "name: 'FIXME Comments',"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 81,
            "column": 77,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "pattern: /\\/\\/ FIXME[:\\s]*(.*)|\\/\\* FIXME[:\\s]*(.*?)\\*\\//gi,"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 82,
            "column": 36,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "severity: 'medium',"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 83,
            "column": 42,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "category: 'code-quality',"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 84,
            "column": 83,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "description: 'FIXME comments indicate broken or problematic code',"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 87,
            "column": 14,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "{"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 88,
            "column": 39,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "name: 'HACK Comments',"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 89,
            "column": 75,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "pattern: /\\/\\/ HACK[:\\s]*(.*)|\\/\\* HACK[:\\s]*(.*?)\\*\\//gi,"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 90,
            "column": 34,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "severity: 'high',"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 91,
            "column": 45,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "category: 'maintainability',"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 92,
            "column": 78,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "description: 'HACK comments indicate non-standard solutions',"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 95,
            "column": 14,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "{"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 96,
            "column": 44,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "name: 'Console Statements',"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 97,
            "column": 72,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "pattern: /console\\.(log|debug|info|warn|error)\\s*\\(/gi,"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 98,
            "column": 36,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "severity: 'medium',"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 99,
            "column": 42,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "category: 'code-quality',"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 100,
            "column": 84,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "description: 'Console statements should not be in production code',"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 103,
            "column": 14,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "{"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 104,
            "column": 45,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "name: 'Debugger Statements',"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 106,
            "column": 34,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "severity: 'high',"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 107,
            "column": 42,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "category: 'code-quality',"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 108,
            "column": 84,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "description: 'Debugger statements will cause issues in production',"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 111,
            "column": 14,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "{"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 112,
            "column": 39,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "name: 'Magic Numbers',"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 114,
            "column": 33,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "severity: 'low',"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 115,
            "column": 45,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "category: 'maintainability',"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 116,
            "column": 81,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "description: 'Large numeric literals should be named constants',"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 119,
            "column": 14,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "{"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 120,
            "column": 40,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "name: 'Any Type Usage',"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 121,
            "column": 39,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "pattern: /:\\s*any\\b/g,"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 122,
            "column": 36,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "severity: 'medium',"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 123,
            "column": 42,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "category: 'code-quality',"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 127,
            "column": 14,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "{"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 128,
            "column": 54,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "name: 'Suppressed TypeScript Errors',"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 129,
            "column": 57,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "pattern: /@ts-ignore|@ts-expect-error/g,"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 130,
            "column": 36,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "severity: 'medium',"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 131,
            "column": 42,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "category: 'code-quality',"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 132,
            "column": 86,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "description: 'TypeScript error suppression should be used sparingly',"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 137,
            "column": 14,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "{"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 138,
            "column": 53,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "name: 'Synchronous File Operations',"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 139,
            "column": 79,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "pattern: /fs\\.readFileSync|fs\\.writeFileSync|fs\\.existsSync/g,"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 140,
            "column": 36,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "severity: 'medium',"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 141,
            "column": 41,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "category: 'performance',"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 142,
            "column": 81,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "description: 'Synchronous file operations block the event loop',"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 145,
            "column": 14,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "{"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 146,
            "column": 38,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "name: 'Nested Loops',"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 148,
            "column": 33,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "severity: 'low',"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 149,
            "column": 41,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "category: 'performance',"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 150,
            "column": 94,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "description: 'Nested loops can cause performance issues with large datasets',"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 155,
            "column": 14,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "{"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 156,
            "column": 47,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "name: 'Hardcoded Credentials',"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 158,
            "column": 111,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "/(password|secret|api[_-]?key|auth[_-]?token|access[_-]?token)\\s*[:=]\\s*['\"][^'\"]+['\"]/gi,"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 159,
            "column": 38,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "severity: 'critical',"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 160,
            "column": 38,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "category: 'security',"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 161,
            "column": 74,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "description: 'Hardcoded credentials are a security risk',"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 164,
            "column": 14,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "{"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 165,
            "column": 36,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "name: 'Eval Usage',"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 166,
            "column": 41,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "pattern: /\\beval\\s*\\(/g,"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 167,
            "column": 38,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "severity: 'critical',"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 168,
            "column": 38,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "category: 'security',"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 169,
            "column": 78,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "description: 'Dynamic code execution can be a security risk',"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 175,
            "column": 14,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "{"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 176,
            "column": 56,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "name: 'Missing Function Documentation',"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 178,
            "column": 114,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "/^(?!\\s*\\/\\*\\*|\\s*\\/\\/).*function\\s+\\w+\\s*\\(|^(?!\\s*\\/\\*\\*|\\s*\\/\\/).*const\\s+\\w+\\s*=\\s*\\(/gm,"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 179,
            "column": 33,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "severity: 'low',"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 180,
            "column": 43,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "category: 'documentation',"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 181,
            "column": 75,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "description: 'Public functions should have documentation',"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 186,
            "column": 14,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "{"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 187,
            "column": 46,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "name: 'Long Parameter Lists',"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 188,
            "column": 74,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "pattern: /\\([^)]*,\\s*[^)]*,\\s*[^)]*,\\s*[^)]*,\\s*[^)]*,/g,"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 189,
            "column": 36,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "severity: 'medium',"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 190,
            "column": 45,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "category: 'maintainability',"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 191,
            "column": 84,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "description: 'Functions with many parameters are hard to maintain',"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 194,
            "column": 14,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "{"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 195,
            "column": 38,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "name: 'Deep Nesting',"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 197,
            "column": 36,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "severity: 'medium',"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 198,
            "column": 45,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "category: 'maintainability',"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 199,
            "column": 80,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "description: 'Deeply nested code is hard to read and maintain',"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 202,
            "column": 14,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "{"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 203,
            "column": 40,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "name: 'Unused Imports',"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 205,
            "column": 33,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "severity: 'low',"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 206,
            "column": 42,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "category: 'code-quality',"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 207,
            "column": 69,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "description: 'Unused imports add unnecessary bloat',"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 226,
            "column": 84,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (this.excludePatterns.some(pattern => pattern.test(relativePath))) {"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 230,
            "column": 39,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (entry.isDirectory()) {"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 232,
            "column": 93,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "} else if (entry.isFile() && extensions.some(ext => entry.name.endsWith(ext))) {"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 247,
            "column": 51,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "for (const pattern of this.patterns) {"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 250,
            "column": 57,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "// Reset regex state for global patterns"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 251,
            "column": 47,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "pattern.pattern.lastIndex = 0;"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 254,
            "column": 44,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "// Find line and column"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 255,
            "column": 75,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "const beforeMatch = content.substring(0, match.index);"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 256,
            "column": 71,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "const lineNumber = beforeMatch.split('\\n').length;"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 257,
            "column": 73,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "const lineStart = beforeMatch.lastIndexOf('\\n') + 1;"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 260,
            "column": 72,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "// Get context (the line where the match was found)"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 263,
            "column": 65,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "// Skip false positives for certain patterns"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 264,
            "column": 80,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (this.isValidMatch(pattern, match, context, filePath)) {"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 265,
            "column": 37,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "items.push({"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 268,
            "column": 36,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "column,"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 278,
            "column": 71,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "// Prevent infinite loops with non-global patterns"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 279,
            "column": 51,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (!pattern.pattern.global) {"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 303,
            "column": 64,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "// Skip version numbers, common constants, etc."
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 310,
            "column": 18,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "}"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 314,
            "column": 80,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "// Skip if in test files, development tools, debug/config files"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 315,
            "column": 99,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (/test|spec|\\.test\\.|\\.spec\\.|development|debug|config|Debug/i.test(context)) {"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 319,
            "column": 79,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (/config|debug|development|example|demo/i.test(filePath)) {"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 321,
            "column": 18,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "}"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 328,
            "column": 18,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "}"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 331,
            "column": 18,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "}"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 335,
            "column": 60,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "// Skip deep nesting in configuration files"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 338,
            "column": 18,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "}"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 346,
            "column": 51,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "// Skip generated or example files"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 347,
            "column": 73,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (/generated|example|demo|\\.d\\.ts$/i.test(filePath)) {"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 349,
            "column": 18,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "}"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 353,
            "column": 85,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "// Skip test functions, private functions, and very simple functions"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 354,
            "column": 83,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (/test|spec|private|_/i.test(context) || context.length < 50) {"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 356,
            "column": 18,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "}"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 361,
            "column": 76,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "// For now, we'll be permissive and only flag obvious cases"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 364,
            "column": 21,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "default:"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 372,
            "column": 29,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "(acc, item) => {"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 373,
            "column": 68,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "acc[item.severity] = (acc[item.severity] || 0) + 1;"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 446,
            "column": 29,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "(acc, item) => {"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 447,
            "column": 68,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "acc[item.severity] = (acc[item.severity] || 0) + 1;"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 454,
            "column": 29,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "(acc, item) => {"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 455,
            "column": 68,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "acc[item.category] = (acc[item.category] || 0) + 1;"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 465,
            "column": 28,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "bySeverity,"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 466,
            "column": 28,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "byCategory,"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 471,
            "column": 69,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "// Sort by severity (critical > high > medium > low)"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 497,
            "column": 89,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "for (const [severity, count] of Object.entries(report.summary.bySeverity)) {"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 505,
            "column": 89,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "for (const [category, count] of Object.entries(report.summary.byCategory)) {"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 512,
            "column": 67,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "for (const recommendation of report.recommendations) {"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 518,
            "column": 43,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (report.items.length > 0) {"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 520,
            "column": 60,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "const topItems = report.items.slice(0, 10);"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 521,
            "column": 47,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "for (const item of topItems) {"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 522,
            "column": 81,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "const severityEmoji = severityEmojis[item.severity] || '📌';"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 524,
            "column": 65,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "console.log(`      💬 ${item.description}`);"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 525,
            "column": 64,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "console.log(`      💡 ${item.suggestion}`);"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 528,
            "column": 18,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "}"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 530,
            "column": 48,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (report.items.length > 10) {"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 531,
            "column": 86,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "console.log(`   ... and ${report.items.length - 10} more items`);"
        },
        {
            "file": "vite-plugins/asset-manifest.ts",
            "line": 26,
            "column": 17,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log('📋 Generating asset manifest...');"
        },
        {
            "file": "vite-plugins/asset-manifest.ts",
            "line": 48,
            "column": 13,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.warn('⚠️  Some asset directories not found, continuing...');"
        },
        {
            "file": "vite-plugins/asset-manifest.ts",
            "line": 61,
            "column": 13,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.warn(`⚠️  Asset directory not found: ${dir}`);"
        },
        {
            "file": "vite-plugins/asset-manifest.ts",
            "line": 124,
            "column": 13,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.error(`❌ Failed to process asset: ${filePath}`, error);"
        },
        {
            "file": "vite-plugins/asset-manifest.ts",
            "line": 226,
            "column": 9,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log(`"
        },
        {
            "file": "vite-plugins/asset-manifest.ts",
            "line": 23,
            "column": 25,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (isDev) {"
        },
        {
            "file": "vite-plugins/asset-manifest.ts",
            "line": 25,
            "column": 21,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "} else {"
        },
        {
            "file": "vite-plugins/asset-manifest.ts",
            "line": 56,
            "column": 44,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "for (const filePath of files) {"
        },
        {
            "file": "vite-plugins/asset-manifest.ts",
            "line": 71,
            "column": 43,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "for (const entry of entries) {"
        },
        {
            "file": "vite-plugins/asset-manifest.ts",
            "line": 72,
            "column": 56,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "const fullPath = join(dir, entry.name);"
        },
        {
            "file": "vite-plugins/asset-manifest.ts",
            "line": 74,
            "column": 43,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (entry.isDirectory()) {"
        },
        {
            "file": "vite-plugins/asset-manifest.ts",
            "line": 75,
            "column": 64,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "const subFiles = await findFiles(fullPath);"
        },
        {
            "file": "vite-plugins/asset-manifest.ts",
            "line": 77,
            "column": 25,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "} else {"
        },
        {
            "file": "vite-plugins/asset-manifest.ts",
            "line": 110,
            "column": 73,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "const atlasMetadata = await loadAtlasMetadata(filePath);"
        },
        {
            "file": "vite-plugins/asset-manifest.ts",
            "line": 111,
            "column": 37,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (atlasMetadata) {"
        },
        {
            "file": "vite-plugins/asset-manifest.ts",
            "line": 115,
            "column": 72,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "const imageMetadata = await getImageMetadata(filePath);"
        },
        {
            "file": "vite-plugins/asset-manifest.ts",
            "line": 116,
            "column": 37,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (imageMetadata) {"
        },
        {
            "file": "vite-plugins/asset-manifest.ts",
            "line": 162,
            "column": 21,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "return {"
        },
        {
            "file": "vite-plugins/asset-manifest.ts",
            "line": 179,
            "column": 21,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "return {"
        },
        {
            "file": "vite-plugins/asset-manifest.ts",
            "line": 204,
            "column": 38,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "switch (entry.category) {"
        },
        {
            "file": "vite-plugins/asset-manifest.ts",
            "line": 205,
            "column": 34,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "case 'essential':"
        },
        {
            "file": "vite-plugins/asset-manifest.ts",
            "line": 206,
            "column": 61,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "manifest.categories.essential.push(key);"
        },
        {
            "file": "vite-plugins/asset-manifest.ts",
            "line": 207,
            "column": 27,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "break;"
        },
        {
            "file": "vite-plugins/asset-manifest.ts",
            "line": 210,
            "column": 78,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "// This could be enhanced to parse level names from paths"
        },
        {
            "file": "vite-plugins/asset-manifest.ts",
            "line": 211,
            "column": 65,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (!manifest.categories.level['default']) {"
        },
        {
            "file": "vite-plugins/asset-manifest.ts",
            "line": 213,
            "column": 22,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "}"
        },
        {
            "file": "vite-plugins/asset-manifest.ts",
            "line": 214,
            "column": 68,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "manifest.categories.level['default'].push(key);"
        },
        {
            "file": "vite-plugins/asset-manifest.ts",
            "line": 215,
            "column": 27,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "break;"
        },
        {
            "file": "vite-plugins/asset-manifest.ts",
            "line": 216,
            "column": 33,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "case 'optional':"
        },
        {
            "file": "vite-plugins/asset-manifest.ts",
            "line": 217,
            "column": 60,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "manifest.categories.optional.push(key);"
        },
        {
            "file": "vite-plugins/audio-processor.ts",
            "line": 35,
            "column": 13,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log('🔊 Starting audio optimization...');"
        },
        {
            "file": "vite-plugins/audio-processor.ts",
            "line": 54,
            "column": 13,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.error('❌ Audio optimization failed:', error);"
        },
        {
            "file": "vite-plugins/audio-processor.ts",
            "line": 76,
            "column": 13,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.warn(`⚠️  Could not read directory: ${dir}`);"
        },
        {
            "file": "vite-plugins/audio-processor.ts",
            "line": 135,
            "column": 17,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.warn('⚠️  FFmpeg not found - copying audio files without optimization');"
        },
        {
            "file": "vite-plugins/audio-processor.ts",
            "line": 144,
            "column": 13,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.error(`❌ Failed to process audio ${audioPath}:`, error);"
        },
        {
            "file": "vite-plugins/audio-processor.ts",
            "line": 201,
            "column": 21,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.error('FFmpeg error:', message);"
        },
        {
            "file": "vite-plugins/audio-processor.ts",
            "line": 241,
            "column": 9,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log(`"
        },
        {
            "file": "vite-plugins/audio-processor.ts",
            "line": 30,
            "column": 25,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (isDev) {"
        },
        {
            "file": "vite-plugins/audio-processor.ts",
            "line": 39,
            "column": 26,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (!isDev) {"
        },
        {
            "file": "vite-plugins/audio-processor.ts",
            "line": 50,
            "column": 50,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "for (const audioPath of audioFiles) {"
        },
        {
            "file": "vite-plugins/audio-processor.ts",
            "line": 65,
            "column": 43,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "for (const entry of entries) {"
        },
        {
            "file": "vite-plugins/audio-processor.ts",
            "line": 66,
            "column": 56,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "const fullPath = join(dir, entry.name);"
        },
        {
            "file": "vite-plugins/audio-processor.ts",
            "line": 68,
            "column": 43,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (entry.isDirectory()) {"
        },
        {
            "file": "vite-plugins/audio-processor.ts",
            "line": 69,
            "column": 69,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "const subFiles = await findAudioFiles(fullPath);"
        },
        {
            "file": "vite-plugins/audio-processor.ts",
            "line": 71,
            "column": 54,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "} else if (isAudioFile(entry.name)) {"
        },
        {
            "file": "vite-plugins/audio-processor.ts",
            "line": 114,
            "column": 54,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "// Generate WebM version (Opus codec)"
        },
        {
            "file": "vite-plugins/audio-processor.ts",
            "line": 115,
            "column": 74,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "const webmPath = join(outputDirPath, `${baseName}.webm`);"
        },
        {
            "file": "vite-plugins/audio-processor.ts",
            "line": 116,
            "column": 79,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "await convertWithFFmpeg(audioPath, webmPath, 'webm', bitrate);"
        },
        {
            "file": "vite-plugins/audio-processor.ts",
            "line": 117,
            "column": 43,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "processed.webm = webmPath;"
        },
        {
            "file": "vite-plugins/audio-processor.ts",
            "line": 119,
            "column": 59,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "const webmStats = await fs.stat(webmPath);"
        },
        {
            "file": "vite-plugins/audio-processor.ts",
            "line": 122,
            "column": 41,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "// Generate MP3 fallback"
        },
        {
            "file": "vite-plugins/audio-processor.ts",
            "line": 123,
            "column": 72,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "const mp3Path = join(outputDirPath, `${baseName}.mp3`);"
        },
        {
            "file": "vite-plugins/audio-processor.ts",
            "line": 124,
            "column": 67,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (extname(audioPath).toLowerCase() !== '.mp3') {"
        },
        {
            "file": "vite-plugins/audio-processor.ts",
            "line": 127,
            "column": 67,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "// Copy existing MP3 if it's the source format"
        },
        {
            "file": "vite-plugins/audio-processor.ts",
            "line": 129,
            "column": 18,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "}"
        },
        {
            "file": "vite-plugins/audio-processor.ts",
            "line": 130,
            "column": 41,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "processed.mp3 = mp3Path;"
        },
        {
            "file": "vite-plugins/audio-processor.ts",
            "line": 132,
            "column": 57,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "const mp3Stats = await fs.stat(mp3Path);"
        },
        {
            "file": "vite-plugins/audio-processor.ts",
            "line": 134,
            "column": 21,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "} else {"
        },
        {
            "file": "vite-plugins/audio-processor.ts",
            "line": 136,
            "column": 74,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "// Just copy the original file if FFmpeg is not available"
        },
        {
            "file": "vite-plugins/audio-processor.ts",
            "line": 137,
            "column": 75,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "const copyPath = join(outputDirPath, basename(audioPath));"
        },
        {
            "file": "vite-plugins/audio-processor.ts",
            "line": 138,
            "column": 56,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "await fs.copyFile(audioPath, copyPath);"
        },
        {
            "file": "vite-plugins/audio-processor.ts",
            "line": 186,
            "column": 37,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (format === 'webm') {"
        },
        {
            "file": "vite-plugins/audio-processor.ts",
            "line": 188,
            "column": 43,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "} else if (format === 'mp3') {"
        },
        {
            "file": "vite-plugins/audio-processor.ts",
            "line": 198,
            "column": 56,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "// Only log actual errors, not progress"
        },
        {
            "file": "vite-plugins/audio-processor.ts",
            "line": 199,
            "column": 49,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "const message = data.toString();"
        },
        {
            "file": "vite-plugins/audio-processor.ts",
            "line": 200,
            "column": 80,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (message.includes('Error') || message.includes('Invalid')) {"
        },
        {
            "file": "vite-plugins/audio-processor.ts",
            "line": 205,
            "column": 42,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "ffmpeg.on('error', error => {"
        },
        {
            "file": "vite-plugins/audio-processor.ts",
            "line": 209,
            "column": 41,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "ffmpeg.on('close', code => {"
        },
        {
            "file": "vite-plugins/audio-processor.ts",
            "line": 210,
            "column": 34,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (code === 0) {"
        },
        {
            "file": "vite-plugins/audio-processor.ts",
            "line": 212,
            "column": 25,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "} else {"
        },
        {
            "file": "vite-plugins/image-optimizer.ts",
            "line": 34,
            "column": 13,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log('🖼️  Starting image optimization...');"
        },
        {
            "file": "vite-plugins/image-optimizer.ts",
            "line": 53,
            "column": 13,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.error('❌ Image optimization failed:', error);"
        },
        {
            "file": "vite-plugins/image-optimizer.ts",
            "line": 77,
            "column": 13,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.warn(`⚠️  Could not read directory: ${dir}`);"
        },
        {
            "file": "vite-plugins/image-optimizer.ts",
            "line": 156,
            "column": 13,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.error(`❌ Failed to process image ${imagePath}:`, error);"
        },
        {
            "file": "vite-plugins/image-optimizer.ts",
            "line": 207,
            "column": 9,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log(`"
        },
        {
            "file": "vite-plugins/image-optimizer.ts",
            "line": 29,
            "column": 25,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (isDev) {"
        },
        {
            "file": "vite-plugins/image-optimizer.ts",
            "line": 38,
            "column": 26,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (!isDev) {"
        },
        {
            "file": "vite-plugins/image-optimizer.ts",
            "line": 49,
            "column": 50,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "for (const imagePath of imageFiles) {"
        },
        {
            "file": "vite-plugins/image-optimizer.ts",
            "line": 65,
            "column": 43,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "for (const entry of entries) {"
        },
        {
            "file": "vite-plugins/image-optimizer.ts",
            "line": 66,
            "column": 56,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "const fullPath = join(dir, entry.name);"
        },
        {
            "file": "vite-plugins/image-optimizer.ts",
            "line": 68,
            "column": 43,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (entry.isDirectory()) {"
        },
        {
            "file": "vite-plugins/image-optimizer.ts",
            "line": 69,
            "column": 69,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "const subFiles = await findImageFiles(fullPath);"
        },
        {
            "file": "vite-plugins/image-optimizer.ts",
            "line": 71,
            "column": 54,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "} else if (isImageFile(entry.name)) {"
        },
        {
            "file": "vite-plugins/image-optimizer.ts",
            "line": 118,
            "column": 53,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (metadata.width && metadata.height) {"
        },
        {
            "file": "vite-plugins/image-optimizer.ts",
            "line": 119,
            "column": 69,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "const maxSize = ASSET_PIPELINE_CONFIG.image.maxSize;"
        },
        {
            "file": "vite-plugins/image-optimizer.ts",
            "line": 120,
            "column": 90,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (metadata.width > maxSize.width || metadata.height > maxSize.height) {"
        },
        {
            "file": "vite-plugins/image-optimizer.ts",
            "line": 121,
            "column": 66,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "image.resize(maxSize.width, maxSize.height, {"
        },
        {
            "file": "vite-plugins/image-optimizer.ts",
            "line": 122,
            "column": 39,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "fit: 'inside',"
        },
        {
            "file": "vite-plugins/image-optimizer.ts",
            "line": 138,
            "column": 80,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (extname(imagePath).toLowerCase() !== '.png' || quality < 100) {"
        },
        {
            "file": "vite-plugins/image-optimizer.ts",
            "line": 139,
            "column": 72,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "const pngPath = join(outputDirPath, `${baseName}.png`);"
        },
        {
            "file": "vite-plugins/image-optimizer.ts",
            "line": 140,
            "column": 70,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "await image.clone().png({ quality }).toFile(pngPath);"
        },
        {
            "file": "vite-plugins/image-optimizer.ts",
            "line": 143,
            "column": 84,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "// eslint-disable-next-line security/detect-non-literal-fs-filename"
        },
        {
            "file": "vite-plugins/image-optimizer.ts",
            "line": 144,
            "column": 57,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "const pngStats = await fs.stat(pngPath);"
        },
        {
            "file": "vite-plugins/image-optimizer.ts",
            "line": 147,
            "column": 63,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "// Copy original PNG if it's already optimized"
        },
        {
            "file": "vite-plugins/image-optimizer.ts",
            "line": 148,
            "column": 72,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "const pngPath = join(outputDirPath, `${baseName}.png`);"
        },
        {
            "file": "vite-plugins/image-optimizer.ts",
            "line": 149,
            "column": 55,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "await fs.copyFile(imagePath, pngPath);"
        },
        {
            "file": "vite-plugins/image-optimizer.ts",
            "line": 150,
            "column": 41,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "processed.png = pngPath;"
        },
        {
            "file": "vite-plugins/texture-packer.ts",
            "line": 59,
            "column": 13,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log('🗂️  Starting texture atlas generation...');"
        },
        {
            "file": "vite-plugins/texture-packer.ts",
            "line": 65,
            "column": 13,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log(`✅ Generated ${atlases.length} texture atlases`);"
        },
        {
            "file": "vite-plugins/texture-packer.ts",
            "line": 91,
            "column": 9,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.log("
        },
        {
            "file": "vite-plugins/texture-packer.ts",
            "line": 119,
            "column": 9,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.warn(`⚠️  Could not read directory: ${sourceDir}`);"
        },
        {
            "file": "vite-plugins/texture-packer.ts",
            "line": 171,
            "column": 17,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.warn(`⚠️  Could not read dimensions for: ${spritePath}`);"
        },
        {
            "file": "vite-plugins/texture-packer.ts",
            "line": 198,
            "column": 21,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.warn(`⚠️  Could not trim: ${spritePath}`);"
        },
        {
            "file": "vite-plugins/texture-packer.ts",
            "line": 215,
            "column": 13,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.error(`❌ Failed to load sprite: ${spritePath}`, error);"
        },
        {
            "file": "vite-plugins/texture-packer.ts",
            "line": 250,
            "column": 9,
            "pattern": "Console Statements",
            "severity": "medium",
            "category": "code-quality",
            "description": "Console statements should not be in production code",
            "suggestion": "Replace with proper logging or remove debug statements",
            "context": "console.warn("
        },
        {
            "file": "vite-plugins/texture-packer.ts",
            "line": 282,
            "column": 29,
            "pattern": "Long Parameter Lists",
            "severity": "medium",
            "category": "maintainability",
            "description": "Functions with many parameters are hard to maintain",
            "suggestion": "Use object parameters or break into smaller functions",
            "context": "const atlasImage = sharp({"
        },
        {
            "file": "vite-plugins/texture-packer.ts",
            "line": 61,
            "column": 43,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "for (const atlas of atlases) {"
        },
        {
            "file": "vite-plugins/texture-packer.ts",
            "line": 111,
            "column": 53,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "// Recursively search subdirectories"
        },
        {
            "file": "vite-plugins/texture-packer.ts",
            "line": 112,
            "column": 76,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "const subFiles = await findSpriteFiles(fullPath, patterns);"
        },
        {
            "file": "vite-plugins/texture-packer.ts",
            "line": 114,
            "column": 61,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "} else if (isSpriteFile(entry.name, patterns)) {"
        },
        {
            "file": "vite-plugins/texture-packer.ts",
            "line": 170,
            "column": 55,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (!metadata.width || !metadata.height) {"
        },
        {
            "file": "vite-plugins/texture-packer.ts",
            "line": 176,
            "column": 28,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "let trimmed = {"
        },
        {
            "file": "vite-plugins/texture-packer.ts",
            "line": 184,
            "column": 32,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "if (options.trim) {"
        },
        {
            "file": "vite-plugins/texture-packer.ts",
            "line": 185,
            "column": 22,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "try {"
        },
        {
            "file": "vite-plugins/texture-packer.ts",
            "line": 189,
            "column": 83,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "// Calculate trim offset (Sharp doesn't provide this directly)"
        },
        {
            "file": "vite-plugins/texture-packer.ts",
            "line": 190,
            "column": 32,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "trimmed = {"
        },
        {
            "file": "vite-plugins/texture-packer.ts",
            "line": 197,
            "column": 57,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "// If trim fails, use original image"
        },
        {
            "file": "vite-plugins/texture-packer.ts",
            "line": 204,
            "column": 27,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "sprites.push({"
        },
        {
            "file": "vite-plugins/texture-packer.ts",
            "line": 209,
            "column": 25,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "trimmed,"
        },
        {
            "file": "vite-plugins/texture-packer.ts",
            "line": 328,
            "column": 21,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "trimmed:"
        },
        {
            "file": "vite-plugins/texture-packer.ts",
            "line": 329,
            "column": 65,
            "pattern": "Deep Nesting",
            "severity": "medium",
            "category": "maintainability",
            "description": "Deeply nested code is hard to read and maintain",
            "suggestion": "Extract nested logic into separate functions or early returns",
            "context": "sprite.trimmed.width !== sprite.originalWidth ||"
        },
        {
            "file": "config/deployment/config.ts",
            "line": 3,
            "column": 4,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "* 2025 best practices implementation"
        },
        {
            "file": "config/deployment/config.ts",
            "line": 71,
            "column": 31,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "responseTime: 200, // ms"
        },
        {
            "file": "config/deployment/config.ts",
            "line": 72,
            "column": 38,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "downtimeCostPerHour: 50000 // $50k/hour for major studios"
        },
        {
            "file": "config/deployment/config.ts",
            "line": 95,
            "column": 28,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "threshold: 100, // ms"
        },
        {
            "file": "config/deployment/config.ts",
            "line": 96,
            "column": 33,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "trackingRange: [100, 1000] // 100-1000ms"
        },
        {
            "file": "config/deployment/config.ts",
            "line": 96,
            "column": 38,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "trackingRange: [100, 1000] // 100-1000ms"
        },
        {
            "file": "config/deployment/config.ts",
            "line": 96,
            "column": 47,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "trackingRange: [100, 1000] // 100-1000ms"
        },
        {
            "file": "config/deployment/config.ts",
            "line": 96,
            "column": 51,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "trackingRange: [100, 1000] // 100-1000ms"
        },
        {
            "file": "config/deployment/config.ts",
            "line": 124,
            "column": 19,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "responseTime: 200 // maximum 200ms response time"
        },
        {
            "file": "scripts/template-cleanup/setup-template.js",
            "line": 71,
            "column": 50,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "this.log(`  3. Open http://localhost:5173 to see your game`, 'info');"
        },
        {
            "file": "src/components/CoreComponents.ts",
            "line": 47,
            "column": 35,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "public maxSpeed: number = 100"
        },
        {
            "file": "src/components/CoreComponents.ts",
            "line": 134,
            "column": 29,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "public energy: number = 100;"
        },
        {
            "file": "src/components/CoreComponents.ts",
            "line": 135,
            "column": 32,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "public maxEnergy: number = 100;"
        },
        {
            "file": "src/components/CoreComponents.ts",
            "line": 182,
            "column": 34,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "public maxCapacity: number = 1000;"
        },
        {
            "file": "src/components/CoreComponents.ts",
            "line": 184,
            "column": 39,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "constructor(maxCapacity: number = 1000) {"
        },
        {
            "file": "src/components/CoreComponents.ts",
            "line": 248,
            "column": 32,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "public moveSpeed: number = 150;"
        },
        {
            "file": "src/config/AssetConfig.ts",
            "line": 58,
            "column": 20,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "music: 128, // kbps for background music"
        },
        {
            "file": "src/config/DebugConfig.ts",
            "line": 53,
            "column": 32,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "if (loadTime > 1000) {"
        },
        {
            "file": "src/config/game.config.ts",
            "line": 18,
            "column": 33,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "gravity: { x: 0, y: 300 },"
        },
        {
            "file": "src/config/game.config.ts",
            "line": 61,
            "column": 17,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "text: '#16537e',"
        },
        {
            "file": "src/ecs/Entity.ts",
            "line": 20,
            "column": 1,
            "pattern": "Missing Function Documentation",
            "severity": "low",
            "category": "documentation",
            "description": "Public functions should have documentation",
            "suggestion": "Add JSDoc comments to document function purpose and parameters",
            "context": "const componentName = (component as any).constructor.name;"
        },
        {
            "file": "src/main.ts",
            "line": 12,
            "column": 19,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "MAX_ENTITIES: 100,"
        },
        {
            "file": "src/main.ts",
            "line": 13,
            "column": 22,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "UPDATE_INTERVAL: 100 // 100ms = 10 updates per second for game logic"
        },
        {
            "file": "src/main.ts",
            "line": 23,
            "column": 24,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "backgroundColor: '#000000',"
        },
        {
            "file": "src/scenes/GameScene.ts",
            "line": 10,
            "column": 49,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": ".addComponent(new PositionComponent(640, 360))"
        },
        {
            "file": "src/scenes/GameScene.ts",
            "line": 10,
            "column": 54,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": ".addComponent(new PositionComponent(640, 360))"
        },
        {
            "file": "src/scenes/GameScene.ts",
            "line": 11,
            "column": 58,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": ".addComponent(new VelocityComponent(0, 0, 0, 200))"
        },
        {
            "file": "src/scenes/GameScene.ts",
            "line": 113,
            "column": 49,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": ".addComponent(new PositionComponent(640, 360))"
        },
        {
            "file": "src/scenes/GameScene.ts",
            "line": 113,
            "column": 54,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": ".addComponent(new PositionComponent(640, 360))"
        },
        {
            "file": "src/scenes/GameScene.ts",
            "line": 114,
            "column": 58,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": ".addComponent(new VelocityComponent(0, 0, 0, 200))"
        },
        {
            "file": "src/scenes/GameScene.ts",
            "line": 118,
            "column": 50,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": ".addComponent(new InventoryComponent(1000));"
        },
        {
            "file": "src/scenes/GameScene.ts",
            "line": 185,
            "column": 35,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "this.cameras.main.fadeOut(300, 0, 0, 0);"
        },
        {
            "file": "src/scenes/StartScene.ts",
            "line": 35,
            "column": 47,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "this.background = this.add.tileSprite(640, 360, 1280, 720, 'background');"
        },
        {
            "file": "src/scenes/StartScene.ts",
            "line": 35,
            "column": 52,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "this.background = this.add.tileSprite(640, 360, 1280, 720, 'background');"
        },
        {
            "file": "src/scenes/StartScene.ts",
            "line": 35,
            "column": 57,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "this.background = this.add.tileSprite(640, 360, 1280, 720, 'background');"
        },
        {
            "file": "src/scenes/StartScene.ts",
            "line": 35,
            "column": 63,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "this.background = this.add.tileSprite(640, 360, 1280, 720, 'background');"
        },
        {
            "file": "src/scenes/StartScene.ts",
            "line": 66,
            "column": 19,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": ".text(640, 360, 'Loading...', {"
        },
        {
            "file": "src/scenes/StartScene.ts",
            "line": 66,
            "column": 24,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": ".text(640, 360, 'Loading...', {"
        },
        {
            "file": "src/scenes/StartScene.ts",
            "line": 73,
            "column": 69,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "loadingText.setText(`Loading... ${Math.round(progress * 100)}%`);"
        },
        {
            "file": "src/scenes/StartScene.ts",
            "line": 84,
            "column": 19,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": ".text(640, 150, 'PHASER GAME TEMPLATE', {"
        },
        {
            "file": "src/scenes/StartScene.ts",
            "line": 84,
            "column": 24,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": ".text(640, 150, 'PHASER GAME TEMPLATE', {"
        },
        {
            "file": "src/scenes/StartScene.ts",
            "line": 88,
            "column": 27,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "stroke: '#000000',"
        },
        {
            "file": "src/scenes/StartScene.ts",
            "line": 95,
            "column": 19,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": ".text(640, 200, 'Professional 2D Game Development Foundation', {"
        },
        {
            "file": "src/scenes/StartScene.ts",
            "line": 95,
            "column": 24,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": ".text(640, 200, 'Professional 2D Game Development Foundation', {"
        },
        {
            "file": "src/scenes/StartScene.ts",
            "line": 107,
            "column": 23,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "duration: 2000,"
        },
        {
            "file": "src/scenes/StartScene.ts",
            "line": 113,
            "column": 37,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "this.ship = this.add.sprite(640, 400, 'ship');"
        },
        {
            "file": "src/scenes/StartScene.ts",
            "line": 113,
            "column": 42,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "this.ship = this.add.sprite(640, 400, 'ship');"
        },
        {
            "file": "src/scenes/StartScene.ts",
            "line": 128,
            "column": 16,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "y: 420,"
        },
        {
            "file": "src/scenes/StartScene.ts",
            "line": 129,
            "column": 23,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "duration: 3000,"
        },
        {
            "file": "src/scenes/StartScene.ts",
            "line": 138,
            "column": 19,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": ".text(640, 550, 'Press SPACE to Begin Mission', {"
        },
        {
            "file": "src/scenes/StartScene.ts",
            "line": 138,
            "column": 24,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": ".text(640, 550, 'Press SPACE to Begin Mission', {"
        },
        {
            "file": "src/scenes/StartScene.ts",
            "line": 142,
            "column": 36,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "backgroundColor: '#004422',"
        },
        {
            "file": "src/scenes/StartScene.ts",
            "line": 151,
            "column": 23,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "duration: 1000,"
        },
        {
            "file": "src/scenes/StartScene.ts",
            "line": 161,
            "column": 60,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "this.startButton.setStyle({ backgroundColor: '#006633' });"
        },
        {
            "file": "src/scenes/StartScene.ts",
            "line": 165,
            "column": 60,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "this.startButton.setStyle({ backgroundColor: '#004422' });"
        },
        {
            "file": "src/scenes/StartScene.ts",
            "line": 183,
            "column": 35,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "this.cameras.main.fadeOut(500, 0, 0, 0);"
        },
        {
            "file": "src/systems/AssetLoader.ts",
            "line": 121,
            "column": 52,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "percentage: (loaded / total) * 100"
        },
        {
            "file": "src/systems/CoreSystems.ts",
            "line": 30,
            "column": 42,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "const deltaSeconds = deltaTime / 1000;"
        },
        {
            "file": "src/systems/CoreSystems.ts",
            "line": 187,
            "column": 42,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "const deltaSeconds = deltaTime / 1000;"
        },
        {
            "file": "src/systems/CoreSystems.ts",
            "line": 222,
            "column": 30,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "super(entityManager, 100); // Lowest priority"
        },
        {
            "file": "src/systems/CoreSystems.ts",
            "line": 247,
            "column": 33,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "this.debugText.setDepth(1000); // Ensure it's on top"
        },
        {
            "file": "src/systems/CoreSystems.ts",
            "line": 189,
            "column": 9,
            "pattern": "Nested Loops",
            "severity": "low",
            "category": "performance",
            "description": "Nested loops can cause performance issues with large datasets",
            "suggestion": "Consider algorithm optimization or data structure changes",
            "context": "for (const entity of entities) {"
        },
        {
            "file": "src/systems/SaveGameManager.ts",
            "line": 61,
            "column": 1,
            "pattern": "Missing Function Documentation",
            "severity": "low",
            "category": "documentation",
            "description": "Public functions should have documentation",
            "suggestion": "Add JSDoc comments to document function purpose and parameters",
            "context": "const playerResources = (playerData?.['resources'] as Record<string, unknown>) || {};"
        },
        {
            "file": "src/systems/SaveGameManager.ts",
            "line": 62,
            "column": 1,
            "pattern": "Missing Function Documentation",
            "severity": "low",
            "category": "documentation",
            "description": "Public functions should have documentation",
            "suggestion": "Add JSDoc comments to document function purpose and parameters",
            "context": "const worldData = (data['world'] as Record<string, unknown>) || {};"
        },
        {
            "file": "src/utils/Constants.ts",
            "line": 5,
            "column": 22,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "UPDATE_INTERVAL: 100, // ms"
        },
        {
            "file": "src/utils/Constants.ts",
            "line": 14,
            "column": 18,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "PROBE_SPEED: 200, // pixels per second"
        },
        {
            "file": "src/utils/Constants.ts",
            "line": 47,
            "column": 30,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "fabricationTime: 300 // seconds"
        },
        {
            "file": "src/utils/Constants.ts",
            "line": 52,
            "column": 30,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "fabricationTime: 600 // seconds"
        },
        {
            "file": "src/utils/Constants.ts",
            "line": 57,
            "column": 30,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "fabricationTime: 1200 // seconds"
        },
        {
            "file": "src/utils/Constants.ts",
            "line": 67,
            "column": 20,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "ACCENT_BLUE: '#4488ff',"
        },
        {
            "file": "src/utils/Constants.ts",
            "line": 70,
            "column": 24,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "BACKGROUND_DARK: '#040218',"
        },
        {
            "file": "src/utils/Constants.ts",
            "line": 77,
            "column": 17,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "ERROR: '#ff4444',"
        },
        {
            "file": "src/utils/Constants.ts",
            "line": 78,
            "column": 13,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "INFO: '#4488ff',"
        },
        {
            "file": "src/utils/Constants.ts",
            "line": 82,
            "column": 17,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "MATERIAL: '#888888',"
        },
        {
            "file": "src/utils/SimpleFPSCounter.ts",
            "line": 26,
            "column": 32,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "backgroundColor: '#000000',"
        },
        {
            "file": "src/utils/SimpleFPSCounter.ts",
            "line": 31,
            "column": 31,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "this.fpsText.setDepth(999999);"
        },
        {
            "file": "src/utils/SimpleFPSCounter.ts",
            "line": 62,
            "column": 44,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "this.fpsText.setColor('#ff0000'); // Red"
        },
        {
            "file": "src/utils/Utils.ts",
            "line": 41,
            "column": 37,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "return degrees * (Math.PI / 180);"
        },
        {
            "file": "src/utils/Utils.ts",
            "line": 45,
            "column": 27,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "return radians * (180 / Math.PI);"
        },
        {
            "file": "src/utils/Utils.ts",
            "line": 60,
            "column": 44,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "const hours = Math.floor(seconds / 3600);"
        },
        {
            "file": "src/utils/Utils.ts",
            "line": 61,
            "column": 47,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "const minutes = Math.floor((seconds % 3600) / 60);"
        },
        {
            "file": "src/utils/Utils.ts",
            "line": 76,
            "column": 42,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "parseInt(parts[0], 10) * 3600 + parseInt(parts[1], 10) * 60 + parseInt(parts[2], 10)"
        },
        {
            "file": "testing/config/playwright-ci.config.ts",
            "line": 20,
            "column": 36,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "baseURL: 'http://localhost:4173',"
        },
        {
            "file": "testing/config/playwright-ci.config.ts",
            "line": 107,
            "column": 42,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "url: 'http://localhost:4173',"
        },
        {
            "file": "testing/config/playwright.config.ts",
            "line": 18,
            "column": 36,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "baseURL: 'http://localhost:4173',"
        },
        {
            "file": "testing/config/playwright.config.ts",
            "line": 102,
            "column": 32,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "url: 'http://localhost:4173',"
        },
        {
            "file": "testing/e2e/performance/game-performance.test.ts",
            "line": 17,
            "column": 77,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "maxFPSVariation: isCI ? 4.0 : 1.5, // Max coefficient of variation (CI: 400%, Local: 150%)"
        },
        {
            "file": "testing/e2e/performance/game-performance.test.ts",
            "line": 17,
            "column": 90,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "maxFPSVariation: isCI ? 4.0 : 1.5, // Max coefficient of variation (CI: 400%, Local: 150%)"
        },
        {
            "file": "testing/e2e/performance/game-performance.test.ts",
            "line": 20,
            "column": 25,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "maxLoadTime: isCI ? 30000 : 10000, // Maximum load time in ms"
        },
        {
            "file": "testing/e2e/performance/game-performance.test.ts",
            "line": 20,
            "column": 33,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "maxLoadTime: isCI ? 30000 : 10000, // Maximum load time in ms"
        },
        {
            "file": "testing/e2e/performance/game-performance.test.ts",
            "line": 23,
            "column": 29,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "maxMemoryGrowth: isCI ? 150 : 50, // Maximum memory growth in MB"
        },
        {
            "file": "testing/e2e/performance/game-performance.test.ts",
            "line": 50,
            "column": 29,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "const fps = 1000 / (now - lastTime);"
        },
        {
            "file": "testing/e2e/performance/game-performance.test.ts",
            "line": 54,
            "column": 54,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "if ((window as any).fpsData.length < 300) {"
        },
        {
            "file": "testing/e2e/performance/game-performance.test.ts",
            "line": 97,
            "column": 77,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "`FPS Stability (lower is better): ${((fpsStdDev / avgFPS) * 100).toFixed(2)}%`"
        },
        {
            "file": "testing/e2e/performance/game-performance.test.ts",
            "line": 140,
            "column": 33,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "if (!isCI && loadTime > 5000) {"
        },
        {
            "file": "testing/e2e/performance/game-performance.test.ts",
            "line": 157,
            "column": 37,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "const testDuration = isCI ? 5000 : 10000; // Shorter test in CI"
        },
        {
            "file": "testing/e2e/performance/game-performance.test.ts",
            "line": 157,
            "column": 44,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "const testDuration = isCI ? 5000 : 10000; // Shorter test in CI"
        },
        {
            "file": "testing/e2e/performance/game-performance.test.ts",
            "line": 165,
            "column": 49,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "const initialMemoryMB = initialMemory / 1024 / 1024;"
        },
        {
            "file": "testing/e2e/performance/game-performance.test.ts",
            "line": 165,
            "column": 56,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "const initialMemoryMB = initialMemory / 1024 / 1024;"
        },
        {
            "file": "testing/e2e/performance/game-performance.test.ts",
            "line": 166,
            "column": 45,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "const finalMemoryMB = finalMemory / 1024 / 1024;"
        },
        {
            "file": "testing/e2e/performance/game-performance.test.ts",
            "line": 166,
            "column": 52,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "const finalMemoryMB = finalMemory / 1024 / 1024;"
        },
        {
            "file": "testing/e2e/performance/game-performance.test.ts",
            "line": 202,
            "column": 45,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "// Detect microfreezes (100-1000ms)"
        },
        {
            "file": "testing/e2e/performance/game-performance.test.ts",
            "line": 202,
            "column": 49,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "// Detect microfreezes (100-1000ms)"
        },
        {
            "file": "testing/e2e/performance/game-performance.test.ts",
            "line": 203,
            "column": 37,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "if (frameTime > 100 && frameTime < 1000) {"
        },
        {
            "file": "testing/e2e/performance/game-performance.test.ts",
            "line": 203,
            "column": 56,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "if (frameTime > 100 && frameTime < 1000) {"
        },
        {
            "file": "testing/e2e/performance/game-performance.test.ts",
            "line": 210,
            "column": 43,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "if (now - startTime > 10000 || freezes.length >= 10) {"
        },
        {
            "file": "testing/e2e/performance/game-performance.test.ts",
            "line": 243,
            "column": 48,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "expect(avgFreezeTime).toBeLessThan(500); // Average freeze < 500ms"
        },
        {
            "file": "testing/e2e/performance/game-performance.test.ts",
            "line": 249,
            "column": 41,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "expect(response?.status()).toBe(200);"
        },
        {
            "file": "testing/e2e/performance/game-performance.test.ts",
            "line": 221,
            "column": 1,
            "pattern": "Missing Function Documentation",
            "severity": "low",
            "category": "documentation",
            "description": "Public functions should have documentation",
            "suggestion": "Add JSDoc comments to document function purpose and parameters",
            "context": "const freezeCount = (microfreezes as number[]).length;"
        },
        {
            "file": "testing/e2e/performance/game-performance.test.ts",
            "line": 229,
            "column": 1,
            "pattern": "Missing Function Documentation",
            "severity": "low",
            "category": "documentation",
            "description": "Public functions should have documentation",
            "suggestion": "Add JSDoc comments to document function purpose and parameters",
            "context": "const freezeDurations = (microfreezes as number[]).map(f => f.toFixed(2)).join(', ');"
        },
        {
            "file": "testing/e2e/performance.spec.ts",
            "line": 12,
            "column": 29,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "maxMicrofreezeDuration: 100, // ms"
        },
        {
            "file": "testing/e2e/performance.spec.ts",
            "line": 13,
            "column": 18,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "maxLoadTime: 3000 // 3 seconds"
        },
        {
            "file": "testing/e2e/performance.spec.ts",
            "line": 32,
            "column": 24,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "const maxFPS = 1000 / minFrameTime;"
        },
        {
            "file": "testing/e2e/performance.spec.ts",
            "line": 36,
            "column": 39,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "test('should detect microfreezes (100-1000ms UI freezes)', async ({ page }) => {"
        },
        {
            "file": "testing/e2e/performance.spec.ts",
            "line": 36,
            "column": 43,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "test('should detect microfreezes (100-1000ms UI freezes)', async ({ page }) => {"
        },
        {
            "file": "testing/e2e/performance.spec.ts",
            "line": 70,
            "column": 60,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "const metrics = await measureGamePerformance(page, 30000); // 30 seconds"
        },
        {
            "file": "testing/e2e/performance.spec.ts",
            "line": 73,
            "column": 57,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "expect(metrics.memoryUsage).toBeLessThanOrEqual(100 * 1024 * 1024); // 100MB"
        },
        {
            "file": "testing/e2e/performance.spec.ts",
            "line": 73,
            "column": 63,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "expect(metrics.memoryUsage).toBeLessThanOrEqual(100 * 1024 * 1024); // 100MB"
        },
        {
            "file": "testing/e2e/performance.spec.ts",
            "line": 73,
            "column": 70,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "expect(metrics.memoryUsage).toBeLessThanOrEqual(100 * 1024 * 1024); // 100MB"
        },
        {
            "file": "testing/e2e/performance.spec.ts",
            "line": 77,
            "column": 62,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "async function measureGamePerformance(page: Page, duration = 10000): Promise<PerformanceMetrics> {"
        },
        {
            "file": "testing/e2e/performance.spec.ts",
            "line": 112,
            "column": 92,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "const totalTime = (currentTime - (performance.now() - testDuration)) / 1000;"
        },
        {
            "file": "testing/e2e/performance.spec.ts",
            "line": 133,
            "column": 66,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "microfreezes: performanceData.frameTimes.filter(t => t > 100),"
        },
        {
            "file": "testing/e2e/performance.spec.ts",
            "line": 77,
            "column": 1,
            "pattern": "Missing Function Documentation",
            "severity": "low",
            "category": "documentation",
            "description": "Public functions should have documentation",
            "suggestion": "Add JSDoc comments to document function purpose and parameters",
            "context": "async function measureGamePerformance(page: Page, duration = 10000): Promise<PerformanceMetrics> {"
        },
        {
            "file": "testing/e2e/performance.test.ts",
            "line": 42,
            "column": 37,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "// Should not exceed 512MB (536,870,912 bytes)"
        },
        {
            "file": "testing/e2e/performance.test.ts",
            "line": 42,
            "column": 41,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "// Should not exceed 512MB (536,870,912 bytes)"
        },
        {
            "file": "testing/e2e/performance.test.ts",
            "line": 42,
            "column": 45,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "// Should not exceed 512MB (536,870,912 bytes)"
        },
        {
            "file": "testing/e2e/performance.test.ts",
            "line": 43,
            "column": 42,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "expect(memoryUsage).toBeLessThan(536870912);"
        },
        {
            "file": "testing/unit/ECSTest.ts",
            "line": 25,
            "column": 49,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": ".addComponent(new PositionComponent(100, 200))"
        },
        {
            "file": "testing/unit/ECSTest.ts",
            "line": 25,
            "column": 54,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": ".addComponent(new PositionComponent(100, 200))"
        },
        {
            "file": "testing/unit/ECSTest.ts",
            "line": 39,
            "column": 28,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "if (position.x !== 100 || position.y !== 200) {"
        },
        {
            "file": "testing/unit/ECSTest.ts",
            "line": 39,
            "column": 50,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "if (position.x !== 100 || position.y !== 200) {"
        },
        {
            "file": "testing/unit/config/GameConfig.test.ts",
            "line": 19,
            "column": 55,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "testHarness.simulateInput('pointerdown', { x: 100, y: 100 });"
        },
        {
            "file": "testing/unit/config/GameConfig.test.ts",
            "line": 19,
            "column": 63,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "testHarness.simulateInput('pointerdown', { x: 100, y: 100 });"
        },
        {
            "file": "testing/unit/config/GameConfig.test.ts",
            "line": 20,
            "column": 75,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "expect(scene.input.emit).toHaveBeenCalledWith('pointerdown', { x: 100, y: 100 });"
        },
        {
            "file": "testing/unit/config/GameConfig.test.ts",
            "line": 20,
            "column": 83,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "expect(scene.input.emit).toHaveBeenCalledWith('pointerdown', { x: 100, y: 100 });"
        },
        {
            "file": "testing/unit/systems/SaveGameCompatibility.test.ts",
            "line": 17,
            "column": 38,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "resources: { energy: 100, materials: 50 },"
        },
        {
            "file": "testing/unit/systems/SaveGameCompatibility.test.ts",
            "line": 41,
            "column": 38,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "resources: { energy: 100 }"
        },
        {
            "file": "testing/unit/utils/SimpleFPSCounter.test.ts",
            "line": 81,
            "column": 40,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "backgroundColor: '#000000'"
        },
        {
            "file": "testing/unit/utils/SimpleFPSCounter.test.ts",
            "line": 95,
            "column": 60,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "expect(mockText.setDepth).toHaveBeenCalledWith(999999);"
        },
        {
            "file": "testing/unit/utils/SimpleFPSCounter.test.ts",
            "line": 133,
            "column": 65,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "expect(mockText.setColor).toHaveBeenCalledWith('#ff0000'); // Red"
        },
        {
            "file": "tools/deployment/deploy.js",
            "line": 97,
            "column": 12,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "}, 30000); // Wait 30 seconds"
        },
        {
            "file": "tools/development/generate-ui-sprites.js",
            "line": 24,
            "column": 37,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "'button-normal': { r: 0, g: 100, b: 200, alpha: 1 },"
        },
        {
            "file": "tools/development/generate-ui-sprites.js",
            "line": 24,
            "column": 45,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "'button-normal': { r: 0, g: 100, b: 200, alpha: 1 },"
        },
        {
            "file": "tools/development/generate-ui-sprites.js",
            "line": 25,
            "column": 36,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "'button-hover': { r: 0, g: 120, b: 240, alpha: 1 },"
        },
        {
            "file": "tools/development/generate-ui-sprites.js",
            "line": 25,
            "column": 44,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "'button-hover': { r: 0, g: 120, b: 240, alpha: 1 },"
        },
        {
            "file": "tools/development/generate-ui-sprites.js",
            "line": 26,
            "column": 45,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "'button-pressed': { r: 0, g: 80, b: 160, alpha: 1 },"
        },
        {
            "file": "tools/development/generate-ui-sprites.js",
            "line": 27,
            "column": 33,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "'button-disabled': { r: 100, g: 100, b: 100, alpha: 0.5 }"
        },
        {
            "file": "tools/development/generate-ui-sprites.js",
            "line": 27,
            "column": 41,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "'button-disabled': { r: 100, g: 100, b: 100, alpha: 0.5 }"
        },
        {
            "file": "tools/development/generate-ui-sprites.js",
            "line": 27,
            "column": 49,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "'button-disabled': { r: 100, g: 100, b: 100, alpha: 0.5 }"
        },
        {
            "file": "tools/development/generate-ui-sprites.js",
            "line": 34,
            "column": 30,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "'panel-border': { r: 100, g: 150, b: 255, alpha: 1 }"
        },
        {
            "file": "tools/development/generate-ui-sprites.js",
            "line": 34,
            "column": 38,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "'panel-border': { r: 100, g: 150, b: 255, alpha: 1 }"
        },
        {
            "file": "tools/development/generate-ui-sprites.js",
            "line": 34,
            "column": 46,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "'panel-border': { r: 100, g: 150, b: 255, alpha: 1 }"
        },
        {
            "file": "tools/development/generate-ui-sprites.js",
            "line": 40,
            "column": 37,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "'progress-fill': { r: 0, g: 255, b: 100, alpha: 1 },"
        },
        {
            "file": "tools/development/generate-ui-sprites.js",
            "line": 40,
            "column": 45,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "'progress-fill': { r: 0, g: 255, b: 100, alpha: 1 },"
        },
        {
            "file": "tools/development/generate-ui-sprites.js",
            "line": 41,
            "column": 33,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "'progress-border': { r: 200, g: 200, b: 200, alpha: 1 }"
        },
        {
            "file": "tools/development/generate-ui-sprites.js",
            "line": 41,
            "column": 41,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "'progress-border': { r: 200, g: 200, b: 200, alpha: 1 }"
        },
        {
            "file": "tools/development/generate-ui-sprites.js",
            "line": 41,
            "column": 49,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "'progress-border': { r: 200, g: 200, b: 200, alpha: 1 }"
        },
        {
            "file": "tools/development/generate-ui-sprites.js",
            "line": 46,
            "column": 31,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "'icon-settings': { r: 200, g: 200, b: 200, alpha: 1 },"
        },
        {
            "file": "tools/development/generate-ui-sprites.js",
            "line": 46,
            "column": 39,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "'icon-settings': { r: 200, g: 200, b: 200, alpha: 1 },"
        },
        {
            "file": "tools/development/generate-ui-sprites.js",
            "line": 46,
            "column": 47,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "'icon-settings': { r: 200, g: 200, b: 200, alpha: 1 },"
        },
        {
            "file": "tools/development/generate-ui-sprites.js",
            "line": 47,
            "column": 33,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "'icon-play': { r: 0, g: 255, b: 0, alpha: 1 },"
        },
        {
            "file": "tools/development/generate-ui-sprites.js",
            "line": 48,
            "column": 28,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "'icon-pause': { r: 255, g: 255, b: 0, alpha: 1 },"
        },
        {
            "file": "tools/development/generate-ui-sprites.js",
            "line": 48,
            "column": 36,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "'icon-pause': { r: 255, g: 255, b: 0, alpha: 1 },"
        },
        {
            "file": "tools/development/generate-ui-sprites.js",
            "line": 49,
            "column": 27,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "'icon-stop': { r: 255, g: 0, b: 0, alpha: 1 }"
        },
        {
            "file": "tools/development/performance-check.js",
            "line": 15,
            "column": 18,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "maxLoadTime: 3000 // 3 seconds"
        },
        {
            "file": "tools/development/performance-check.js",
            "line": 99,
            "column": 64,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "console.log(`FPS degradation: ${(degradation * 100).toFixed(2)}%`);"
        },
        {
            "file": "tools/development/performance-check.js",
            "line": 103,
            "column": 80,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "`❌ FPS degradation exceeds tolerance: ${(degradation * 100).toFixed(2)}% > ${PERFORMANCE_THRESHOLDS."
        },
        {
            "file": "tools/development/performance-check.js",
            "line": 103,
            "column": 148,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "`❌ FPS degradation exceeds tolerance: ${(degradation * 100).toFixed(2)}% > ${PERFORMANCE_THRESHOLDS."
        },
        {
            "file": "tools/development/performance-check.js",
            "line": 98,
            "column": 1,
            "pattern": "Missing Function Documentation",
            "severity": "low",
            "category": "documentation",
            "description": "Public functions should have documentation",
            "suggestion": "Add JSDoc comments to document function purpose and parameters",
            "context": "const degradation = (results.fps.baseline - avgFPS) / results.fps.baseline;"
        },
        {
            "file": "tools/development/script-runner.js",
            "line": 4,
            "column": 17,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "* Part of TEMP-012: Template Script Standardization and NPM Migration"
        },
        {
            "file": "tools/development/script-runner.js",
            "line": 65,
            "column": 15,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "const k = 1024;"
        },
        {
            "file": "tools/development/script-runner.js",
            "line": 71,
            "column": 1,
            "pattern": "Missing Function Documentation",
            "severity": "low",
            "category": "documentation",
            "description": "Public functions should have documentation",
            "suggestion": "Add JSDoc comments to document function purpose and parameters",
            "context": "function removePathSafely(targetPath, description, options = {}) {"
        },
        {
            "file": "tools/development/script-runner.js",
            "line": 103,
            "column": 1,
            "pattern": "Missing Function Documentation",
            "severity": "low",
            "category": "documentation",
            "description": "Public functions should have documentation",
            "suggestion": "Add JSDoc comments to document function purpose and parameters",
            "context": "async function runCommand(command, args = [], options = {}) {"
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 3,
            "column": 18,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "* Part of SETUP-006 Project Health & Documentation Enhancement"
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 64,
            "column": 30,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "max_time_ms: 30000,"
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 68,
            "column": 30,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "max_time_ms: 60000,"
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 73,
            "column": 32,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "max_memory_mb: 512"
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 140,
            "column": 71,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "result.details.push(`   Error: ${tscCheck.stdout.slice(0, 200)}...`);"
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 162,
            "column": 73,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "result.details.push(`   Error: ${buildCheck.stdout.slice(0, 200)}...`);"
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 216,
            "column": 73,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "result.details.push(`   Output: ${testCheck.stdout.slice(0, 300)}...`);"
        },
        {
            "file": "tools/monitoring/health-check.ts",
            "line": 288,
            "column": 77,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "result.details.push(`   Output: ${perfCheck.stdout.slice(0, 200)}...`);"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 3,
            "column": 18,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "* Part of SETUP-006 Project Health & Documentation Enhancement"
        },
        {
            "file": "tools/monitoring/technical-debt-tracker.ts",
            "line": 274,
            "column": 59,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "context: context.substring(0, 100) // Limit context length"
        },
        {
            "file": "vite-plugins/asset-manifest.ts",
            "line": 238,
            "column": 19,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "const k = 1024;"
        },
        {
            "file": "vite-plugins/asset-manifest.ts",
            "line": 16,
            "column": 1,
            "pattern": "Missing Function Documentation",
            "severity": "low",
            "category": "documentation",
            "description": "Public functions should have documentation",
            "suggestion": "Add JSDoc comments to document function purpose and parameters",
            "context": "export function assetManifestPlugin(options: AssetManifestOptions): Plugin {"
        },
        {
            "file": "vite-plugins/asset-manifest.ts",
            "line": 34,
            "column": 1,
            "pattern": "Missing Function Documentation",
            "severity": "low",
            "category": "documentation",
            "description": "Public functions should have documentation",
            "suggestion": "Add JSDoc comments to document function purpose and parameters",
            "context": "async function collectAssetInfo(): Promise<void> {"
        },
        {
            "file": "vite-plugins/asset-manifest.ts",
            "line": 52,
            "column": 1,
            "pattern": "Missing Function Documentation",
            "severity": "low",
            "category": "documentation",
            "description": "Public functions should have documentation",
            "suggestion": "Add JSDoc comments to document function purpose and parameters",
            "context": "async function collectAssetsFromDir(dir: string, type: AssetEntry['type']): Promise<void> {"
        },
        {
            "file": "vite-plugins/asset-manifest.ts",
            "line": 65,
            "column": 1,
            "pattern": "Missing Function Documentation",
            "severity": "low",
            "category": "documentation",
            "description": "Public functions should have documentation",
            "suggestion": "Add JSDoc comments to document function purpose and parameters",
            "context": "async function findFiles(dir: string): Promise<string[]> {"
        },
        {
            "file": "vite-plugins/asset-manifest.ts",
            "line": 88,
            "column": 1,
            "pattern": "Missing Function Documentation",
            "severity": "low",
            "category": "documentation",
            "description": "Public functions should have documentation",
            "suggestion": "Add JSDoc comments to document function purpose and parameters",
            "context": "async function addAssetEntry(filePath: string, type: AssetEntry['type']): Promise<void> {"
        },
        {
            "file": "vite-plugins/asset-manifest.ts",
            "line": 128,
            "column": 1,
            "pattern": "Missing Function Documentation",
            "severity": "low",
            "category": "documentation",
            "description": "Public functions should have documentation",
            "suggestion": "Add JSDoc comments to document function purpose and parameters",
            "context": "function determineAssetCategory(path: string): AssetEntry['category'] {"
        },
        {
            "file": "vite-plugins/asset-manifest.ts",
            "line": 187,
            "column": 1,
            "pattern": "Missing Function Documentation",
            "severity": "low",
            "category": "documentation",
            "description": "Public functions should have documentation",
            "suggestion": "Add JSDoc comments to document function purpose and parameters",
            "context": "async function generateManifest(): Promise<void> {"
        },
        {
            "file": "vite-plugins/audio-processor.ts",
            "line": 239,
            "column": 86,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "totalOriginal > 0 ? ((totalOriginal - totalOptimized) / totalOriginal) * 100 : 0;"
        },
        {
            "file": "vite-plugins/audio-processor.ts",
            "line": 252,
            "column": 19,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "const k = 1024;"
        },
        {
            "file": "vite-plugins/audio-processor.ts",
            "line": 23,
            "column": 1,
            "pattern": "Missing Function Documentation",
            "severity": "low",
            "category": "documentation",
            "description": "Public functions should have documentation",
            "suggestion": "Add JSDoc comments to document function purpose and parameters",
            "context": "export function audioProcessorPlugin(options: AudioProcessorOptions): Plugin {"
        },
        {
            "file": "vite-plugins/audio-processor.ts",
            "line": 45,
            "column": 1,
            "pattern": "Missing Function Documentation",
            "severity": "low",
            "category": "documentation",
            "description": "Public functions should have documentation",
            "suggestion": "Add JSDoc comments to document function purpose and parameters",
            "context": "async function processAudioFiles(): Promise<void> {"
        },
        {
            "file": "vite-plugins/audio-processor.ts",
            "line": 59,
            "column": 1,
            "pattern": "Missing Function Documentation",
            "severity": "low",
            "category": "documentation",
            "description": "Public functions should have documentation",
            "suggestion": "Add JSDoc comments to document function purpose and parameters",
            "context": "async function findAudioFiles(dir: string): Promise<string[]> {"
        },
        {
            "file": "vite-plugins/audio-processor.ts",
            "line": 87,
            "column": 1,
            "pattern": "Missing Function Documentation",
            "severity": "low",
            "category": "documentation",
            "description": "Public functions should have documentation",
            "suggestion": "Add JSDoc comments to document function purpose and parameters",
            "context": "async function processAudioFile(audioPath: string): Promise<void> {"
        },
        {
            "file": "vite-plugins/audio-processor.ts",
            "line": 219,
            "column": 1,
            "pattern": "Missing Function Documentation",
            "severity": "low",
            "category": "documentation",
            "description": "Public functions should have documentation",
            "suggestion": "Add JSDoc comments to document function purpose and parameters",
            "context": "async function ensureDirectoryExists(dir: string): Promise<void> {"
        },
        {
            "file": "vite-plugins/image-optimizer.ts",
            "line": 138,
            "column": 74,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "if (extname(imagePath).toLowerCase() !== '.png' || quality < 100) {"
        },
        {
            "file": "vite-plugins/image-optimizer.ts",
            "line": 204,
            "column": 73,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "? (((totalOriginal - totalOptimized) / totalOriginal) * 100).toFixed(1)"
        },
        {
            "file": "vite-plugins/image-optimizer.ts",
            "line": 218,
            "column": 19,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "const k = 1024;"
        },
        {
            "file": "vite-plugins/image-optimizer.ts",
            "line": 22,
            "column": 1,
            "pattern": "Missing Function Documentation",
            "severity": "low",
            "category": "documentation",
            "description": "Public functions should have documentation",
            "suggestion": "Add JSDoc comments to document function purpose and parameters",
            "context": "export function imageOptimizerPlugin(options: ImageOptimizerOptions): Plugin {"
        },
        {
            "file": "vite-plugins/image-optimizer.ts",
            "line": 58,
            "column": 1,
            "pattern": "Missing Function Documentation",
            "severity": "low",
            "category": "documentation",
            "description": "Public functions should have documentation",
            "suggestion": "Add JSDoc comments to document function purpose and parameters",
            "context": "async function findImageFiles(dir: string): Promise<string[]> {"
        },
        {
            "file": "vite-plugins/image-optimizer.ts",
            "line": 88,
            "column": 1,
            "pattern": "Missing Function Documentation",
            "severity": "low",
            "category": "documentation",
            "description": "Public functions should have documentation",
            "suggestion": "Add JSDoc comments to document function purpose and parameters",
            "context": "async function processImage(imagePath: string): Promise<void> {"
        },
        {
            "file": "vite-plugins/image-optimizer.ts",
            "line": 182,
            "column": 1,
            "pattern": "Missing Function Documentation",
            "severity": "low",
            "category": "documentation",
            "description": "Public functions should have documentation",
            "suggestion": "Add JSDoc comments to document function purpose and parameters",
            "context": "async function ensureDirectoryExists(dir: string): Promise<void> {"
        },
        {
            "file": "vite-plugins/texture-packer.ts",
            "line": 308,
            "column": 27,
            "pattern": "Magic Numbers",
            "severity": "low",
            "category": "maintainability",
            "description": "Large numeric literals should be named constants",
            "suggestion": "Extract magic numbers into named constants",
            "context": "format: 'RGBA8888',"
        },
        {
            "file": "vite-plugins/texture-packer.ts",
            "line": 55,
            "column": 1,
            "pattern": "Missing Function Documentation",
            "severity": "low",
            "category": "documentation",
            "description": "Public functions should have documentation",
            "suggestion": "Add JSDoc comments to document function purpose and parameters",
            "context": "export function texturePackerPlugin(atlases: AtlasConfig[]): Plugin {"
        },
        {
            "file": "vite-plugins/texture-packer.ts",
            "line": 70,
            "column": 1,
            "pattern": "Missing Function Documentation",
            "severity": "low",
            "category": "documentation",
            "description": "Public functions should have documentation",
            "suggestion": "Add JSDoc comments to document function purpose and parameters",
            "context": "async function generateAtlas(config: AtlasConfig): Promise<void> {"
        },
        {
            "file": "vite-plugins/texture-packer.ts",
            "line": 100,
            "column": 1,
            "pattern": "Missing Function Documentation",
            "severity": "low",
            "category": "documentation",
            "description": "Public functions should have documentation",
            "suggestion": "Add JSDoc comments to document function purpose and parameters",
            "context": "async function findSpriteFiles(sourceDir: string, patterns: string[]): Promise<string[]> {"
        },
        {
            "file": "vite-plugins/texture-packer.ts",
            "line": 125,
            "column": 1,
            "pattern": "Missing Function Documentation",
            "severity": "low",
            "category": "documentation",
            "description": "Public functions should have documentation",
            "suggestion": "Add JSDoc comments to document function purpose and parameters",
            "context": "function isSpriteFile(filename: string, patterns: string[]): boolean {"
        },
        {
            "file": "vite-plugins/texture-packer.ts",
            "line": 228,
            "column": 1,
            "pattern": "Missing Function Documentation",
            "severity": "low",
            "category": "documentation",
            "description": "Public functions should have documentation",
            "suggestion": "Add JSDoc comments to document function purpose and parameters",
            "context": "function packSprites(sprites: LoadedSprite[], config: AtlasConfig): PackedAtlas {"
        },
        {
            "file": "vite-plugins/texture-packer.ts",
            "line": 274,
            "column": 1,
            "pattern": "Missing Function Documentation",
            "severity": "low",
            "category": "documentation",
            "description": "Public functions should have documentation",
            "suggestion": "Add JSDoc comments to document function purpose and parameters",
            "context": "async function saveAtlas(atlas: PackedAtlas, config: AtlasConfig): Promise<void> {"
        },
        {
            "file": "vite-plugins/texture-packer.ts",
            "line": 349,
            "column": 1,
            "pattern": "Missing Function Documentation",
            "severity": "low",
            "category": "documentation",
            "description": "Public functions should have documentation",
            "suggestion": "Add JSDoc comments to document function purpose and parameters",
            "context": "async function ensureDirectoryExists(dir: string): Promise<void> {"
        }
    ],
    "recommendations": [
        "🟡 MEDIUM: Consider refactoring to address 1038 medium-priority issues",
        "🟢 LOW: Schedule cleanup for 213 low-priority maintenance items",
        "🔴 High technical debt - prioritize cleanup efforts"
    ]
}
