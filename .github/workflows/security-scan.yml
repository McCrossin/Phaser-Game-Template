# Security Scanning Pipeline
name: Security Scan
on:
    pull_request:
        branches: [main, develop]
    push:
        branches: [main, develop]
    schedule:
        - cron: '0 4 * * 1' # Weekly on Monday at 4 AM

jobs:
    static-analysis:
        name: Static Security Analysis
        runs-on: ubuntu-latest
        timeout-minutes: 10
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: '22.17.1'
                  cache: 'npm'

            - name: Install dependencies
              run: npm ci

            - name: Build for analysis
              run: npm run build

            - name: Run ESLint security rules
              run: |
                  echo "=== Running ESLint Security Analysis ==="
                  npm run lint -- --format=codeframe || true

            - name: Check for common security patterns
              run: |
                  echo "=== Checking for Security Anti-patterns ==="
                  echo "Scanning for eval(), innerHTML, and other dangerous patterns..."
                  grep -r "eval(" src/ && echo "‚ö†Ô∏è  Found eval() usage" || echo "‚úÖ No eval() found"
                  grep -r "innerHTML" src/ && echo "‚ö†Ô∏è  Found innerHTML usage" || echo "‚úÖ No innerHTML found"
                  grep -r "document.write" src/ && echo "‚ö†Ô∏è  Found document.write usage" || echo "‚úÖ No document.write found"
                  grep -r "dangerouslySetInnerHTML" src/ && echo "‚ö†Ô∏è  Found dangerouslySetInnerHTML usage" || echo "‚úÖ No dangerouslySetInnerHTML found"

    secret-scanning:
        name: Secret Detection
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Run secret detection
              uses: gitleaks/gitleaks-action@v2
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

    container-security:
        name: Container Security Scan
        runs-on: ubuntu-latest
        if: github.event_name != 'schedule'
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Build Docker image for security scan
              run: |
                  docker build -t security-scan:latest .

            - name: Run Trivy vulnerability scanner
              uses: aquasecurity/trivy-action@master
              with:
                  image-ref: 'security-scan:latest'
                  format: 'table'
                  output: 'trivy-results.txt'
                  severity: 'CRITICAL,HIGH,MEDIUM'
                  ignore-unfixed: false

            - name: Display Trivy scan results
              if: always()
              run: |
                  echo "=== Container Security Scan Results ==="
                  cat trivy-results.txt || echo "No vulnerabilities found"

            - name: Generate SARIF for Security tab (if enabled)
              if: always()
              uses: aquasecurity/trivy-action@master
              with:
                  image-ref: 'security-scan:latest'
                  format: 'sarif'
                  output: 'trivy-results.sarif'
                  severity: 'CRITICAL,HIGH,MEDIUM'
                  ignore-unfixed: false

            - name: Upload Trivy scan results to GitHub Security tab
              if: false # Disabled - CodeQL not available for indie developers
              uses: github/codeql-action/upload-sarif@v3
              continue-on-error: true
              with:
                  sarif_file: 'trivy-results.sarif'

            - name: Security scan summary
              if: always()
              run: |
                  echo "=== Security Scan Summary ==="
                  echo "‚úÖ Container vulnerabilities checked"
                  echo "‚úÖ Results saved to workflow artifacts"
                  echo "üí° For advanced security features, consider GitHub Enterprise or make repository public"

            - name: Upload security scan artifacts
              uses: actions/upload-artifact@v4
              if: always()
              with:
                  name: container-security-results
                  path: |
                      trivy-results.txt
                      trivy-results.sarif

    dependency-check:
        name: Dependency Security Check
        runs-on: ubuntu-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: '22.17.1'
                  cache: 'npm'

            - name: Install dependencies
              run: npm ci

            - name: Run npm audit
              run: npm audit --audit-level moderate

            - name: Check for known vulnerabilities in game dependencies
              run: |
                  echo "Checking Phaser.js and game-specific dependencies..."
                  npx better-npm-audit audit --level moderate
