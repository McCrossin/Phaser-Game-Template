{
    "name": "phaser-game-template",
    "version": "1.0.0",
    "description": "Professional 2D Phaser game template with CI/CD, health checks, and TypeScript",
    "main": "dist/main.js",
    "type": "module",
    "scripts": {
        "dev": "vite --config config/build/vite.config.ts",
        "build": "tsc --project config/build/tsconfig.build.json && vite build --config config/build/vite.config.ts",
        "preview": "vite preview --host --port 4173",
        "test": "vitest run --config testing/config/vitest.config.ts",
        "test:watch": "vitest --config testing/config/vitest.config.ts",
        "test:run": "vitest run --config testing/config/vitest.config.ts",
        "test:ui": "vitest --ui --config testing/config/vitest.config.ts",
        "test:coverage": "vitest --coverage --config testing/config/vitest.config.ts",
        "test:e2e": "playwright test --config testing/config/playwright.config.ts",
        "test:performance": "npx tsx tools/development/script-runner.ts test-performance",
        "lint": "eslint src --ext .ts,.tsx --config config/development/eslint.config.mjs",
        "lint:fix": "eslint src --ext .ts,.tsx --fix --config config/development/eslint.config.mjs",
        "format": "prettier --write \"src/**/*.{ts,tsx,json,css}\"",
        "format:check": "prettier --check \"src/**/*.{ts,tsx,json,css}\"",
        "typecheck": "tsc --noEmit --project config/build/tsconfig.json",
        "docs": "typedoc src/main.ts --options config/build/typedoc.json",
        "prepare": "is-ci || husky",
        "validate": "npm run typecheck && npm run lint && npm run test:run",
        "clean": "npx tsx tools/development/script-runner.ts cleanup-cache",
        "clean:dry-run": "npx tsx tools/development/script-runner.ts cleanup-cache --dry-run",
        "clean:backup": "npx tsx tools/development/script-runner.ts cleanup-cache --backup",
        "build:info": "npx tsx tools/build/build-info.ts",
        "build:analyze": "npm run build && npx tsx tools/build/bundle-analyzer.ts",
        "deploy:staging": "node tools/deployment/deploy.js --environment=staging",
        "deploy:production": "node tools/deployment/deploy.js --environment=production",
        "rollback": "node tools/deployment/rollback.js",
        "performance:check": "npx tsx scripts/performance-check.ts",
        "performance:check:legacy": "npx tsx tools/development/performance-check.ts",
        "ci:setup": "bash scripts/ci-environment-setup.sh",
        "ci:performance": "npm run ci:setup && npm run test:performance && npm run performance:check",
        "health:check": "npx tsc tools/monitoring/health-check.ts --outDir tools/monitoring/compiled --target es2022 --module node16 --moduleResolution node16 --allowSyntheticDefaultImports --esModuleInterop && node tools/monitoring/compiled/health-check.js",
        "health:debt": "npx tsc tools/monitoring/technical-debt-tracker.ts --outDir tools/monitoring/compiled --target es2022 --module node16 --moduleResolution node16 --allowSyntheticDefaultImports --esModuleInterop && node tools/monitoring/compiled/technical-debt-tracker.js",
        "health:report": "npx tsx tools/development/script-runner.ts generate-health-report",
        "test:github-actions": "node tools/maintenance/test-github-actions.js",
        "test:github-actions:quick": "node tools/maintenance/test-github-actions.js --quick",
        "test:github-actions:enhanced": "node scripts/test-github-actions-enhanced.js",
        "test:github-actions:enhanced:quick": "node scripts/test-github-actions-enhanced.js --quick",
        "test:ci-compatibility": "npm run validate && npm run build && echo 'CI compatibility check passed'",
        "verify:ci-setup": "node scripts/verify-ci-setup.js",
        "verify:ci-setup:full": "node scripts/verify-ci-setup.js --check-secrets --check-dependencies",
        "verify:ci-full": "node tools/maintenance/ci-verification.js",
        "template:setup": "node scripts/template-cleanup/setup-template.js",
        "template:verify": "bash scripts/template-cleanup/verify-template-setup.sh",
        "validate:template": "npx tsx scripts/validate-template-quality.ts",
        "validate:template:quick": "npx tsx scripts/validate-template-quality.ts --skip-e2e",
        "validate:template:verbose": "npx tsx scripts/validate-template-quality.ts --verbose",
        "validate:template:json": "npx tsx scripts/validate-template-quality.ts --output validation-report.json --json",
        "test:validation": "vitest run --config testing/config/vitest.validation.config.ts",
        "validate:workflows": "npx tsx scripts/ci-workflow-validator.ts"
    },
    "keywords": [
        "phaser3",
        "typescript",
        "game-template",
        "2d-game",
        "vite",
        "ci-cd",
        "game-development",
        "template"
    ],
    "author": "Template Author",
    "license": "MIT",
    "devDependencies": {
        "@playwright/test": "^1.54.1",
        "@types/js-yaml": "^4.0.9",
        "@types/node": "^24.0.14",
        "@typescript-eslint/eslint-plugin": "^8.38.0",
        "@typescript-eslint/parser": "^8.38.0",
        "@vitest/coverage-v8": "^3.2.4",
        "@vitest/ui": "^3.2.4",
        "better-npm-audit": "^3.11.0",
        "canvas": "^3.1.2",
        "eslint": "^9.0.0",
        "eslint-config-prettier": "^10.1.5",
        "eslint-plugin-prettier": "^5.1.0",
        "eslint-plugin-security": "^3.0.1",
        "husky": "^9.0.0",
        "is-ci": "^4.1.0",
        "js-yaml": "^4.1.0",
        "jsdom": "^26.1.0",
        "lint-staged": "^15.2.0",
        "maxrects-packer": "^2.7.3",
        "playwright": "^1.45.0",
        "prettier": "^3.0.0",
        "sharp": "^0.34.3",
        "typedoc": "^0.28.7",
        "typescript": "^5.6.0",
        "typescript-eslint": "^8.38.0",
        "vite": "^7.0.5",
        "vitest": "^3.2.4"
    },
    "dependencies": {
        "lz-string": "^1.5.0",
        "phaser": "^3.88.2"
    },
    "lint-staged": {
        "*.{ts,tsx}": [
            "npx eslint --fix --config config/development/eslint.config.mjs",
            "npx prettier --write"
        ],
        "*.{json,css,md}": [
            "npx prettier --write"
        ]
    }
}
